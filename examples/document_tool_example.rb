#!/usr/bin/env ruby
# frozen_string_literal: true

# This example demonstrates the DocumentTool integration with OpenAI Agents Ruby.
# DocumentTool provides document generation capabilities for creating PDFs, Word documents,
# Excel spreadsheets, and CSV files. It includes advanced features like templates,
# structured content, and automatic formatting for professional document creation.

require_relative "../lib/openai_agents"

# No API key required for document generation
# The tool works entirely locally using Ruby document libraries

puts "=== Document Tool Example ==="
puts

# ============================================================================
# TOOL SETUP
# ============================================================================

# Create a document tool with default settings
document_tool = OpenAIAgents::Tools::DocumentTool.new(
  name: "document_generator",
  description: "Generate professional documents in various formats",
  output_dir: "./generated_documents"
)

puts "Document tool initialized:"
puts "- Name: #{document_tool.name}"
puts "- Description: #{document_tool.description}"
puts "- Output directory: #{document_tool.output_dir}"
puts

# ============================================================================
# EXAMPLE 1: PDF GENERATION
# ============================================================================

puts "1. PDF document generation:"

# Create an agent with document generation capability
pdf_agent = OpenAIAgents::Agent.new(
  name: "PDFAgent",
  instructions: "You are a document generation assistant. Create professional PDF documents based on user requirements.",
  model: "gpt-4o"
)

# Add document tool to the agent
pdf_agent.add_tool(document_tool)

# Create runner
runner = OpenAIAgents::Runner.new(agent: pdf_agent)

# Test PDF generation
begin
  pdf_messages = [{
    role: "user",
    content: "Create a PDF report about artificial intelligence trends in 2024."
  }]

  pdf_result = runner.run(pdf_messages)
  puts "PDF generation result: #{pdf_result.final_output}"
rescue StandardError => e
  puts "PDF generation error: #{e.message}"
end

puts

# ============================================================================
# EXAMPLE 2: WORD DOCUMENT GENERATION
# ============================================================================

puts "2. Word document generation:"

# Create an agent specialized for Word documents
word_agent = OpenAIAgents::Agent.new(
  name: "WordAgent",
  instructions: "You are a Word document specialist. Create professional Word documents with proper formatting and structure.",
  model: "gpt-4o"
)

# Add document tool
word_agent.add_tool(document_tool)

# Create runner
word_runner = OpenAIAgents::Runner.new(agent: word_agent)

# Test Word document generation
begin
  word_messages = [{
    role: "user",
    content: "Create a Word document with a project proposal for implementing AI in healthcare."
  }]

  word_result = word_runner.run(word_messages)
  puts "Word document result: #{word_result.final_output}"
rescue StandardError => e
  puts "Word document error: #{e.message}"
end

puts

# ============================================================================
# EXAMPLE 3: EXCEL SPREADSHEET GENERATION
# ============================================================================

puts "3. Excel spreadsheet generation:"

# Create an agent for Excel documents
excel_agent = OpenAIAgents::Agent.new(
  name: "ExcelAgent",
  instructions: "You are an Excel specialist. Create professional spreadsheets with data, formulas, and formatting.",
  model: "gpt-4o"
)

# Add document tool
excel_agent.add_tool(document_tool)

# Create runner
excel_runner = OpenAIAgents::Runner.new(agent: excel_agent)

# Test Excel generation
begin
  excel_messages = [{
    role: "user",
    content: "Create an Excel spreadsheet with a budget analysis for a tech startup."
  }]

  excel_result = excel_runner.run(excel_messages)
  puts "Excel spreadsheet result: #{excel_result.final_output}"
rescue StandardError => e
  puts "Excel spreadsheet error: #{e.message}"
end

puts

# ============================================================================
# EXAMPLE 4: DIRECT DOCUMENT GENERATION
# ============================================================================

puts "4. Direct document generation:"

# Test direct document generation with different formats
document_examples = [
  {
    format: "pdf",
    filename: "sample_pdf",
    title: "Sample PDF Report",
    content: {
      sections: [
        {
          heading: "Introduction",
          text: "This is a sample PDF document generated by the DocumentTool."
        },
        {
          heading: "Features",
          list: [
            "PDF generation with Prawn",
            "Structured content support",
            "Multiple format support",
            "Template integration"
          ]
        },
        {
          heading: "Data Table",
          table: {
            headers: ["Feature", "Status", "Priority"],
            data: [
              ["PDF Generation", "Complete", "High"],
              ["Word Documents", "Complete", "High"],
              ["Excel Spreadsheets", "Complete", "Medium"],
              ["CSV Export", "Complete", "Low"]
            ]
          }
        }
      ]
    }
  },
  {
    format: "csv",
    filename: "sample_data",
    content: {
      headers: ["Name", "Age", "City", "Profession"],
      rows: [
        ["John Doe", 30, "New York", "Engineer"],
        ["Jane Smith", 25, "San Francisco", "Designer"],
        ["Bob Johnson", 35, "Chicago", "Manager"],
        ["Alice Brown", 28, "Austin", "Developer"]
      ]
    }
  }
]

document_examples.each do |example|
  puts "\nGenerating #{example[:format].upcase} document:"
  begin
    result = document_tool.call(example)
    if result[:success]
      puts "✅ Successfully generated: #{result[:filepath]}"
      puts "   Size: #{result[:size]} bytes"
      puts "   Created: #{result[:created_at]}"
    else
      puts "❌ Failed: #{result[:error]}"
    end
  rescue StandardError => e
    puts "❌ Error: #{e.message}"
  end
end

puts

# ============================================================================
# EXAMPLE 5: REPORT GENERATION TOOL
# ============================================================================

puts "5. Report generation tool:"

# Create a specialized report tool
report_tool = OpenAIAgents::Tools::ReportTool.new(
  name: "report_generator",
  description: "Generate professional reports with analytics and charts",
  output_dir: "./generated_reports"
)

# Create a report generation agent
report_agent = OpenAIAgents::Agent.new(
  name: "ReportAgent",
  instructions: "You are a professional report generator. Create comprehensive reports with executive summaries, detailed analysis, and data visualizations.",
  model: "gpt-4o"
)

# Add report tool
report_agent.add_tool(report_tool)

# Create runner
report_runner = OpenAIAgents::Runner.new(agent: report_agent)

# Test report generation
begin
  report_messages = [{
    role: "user",
    content: "Generate a summary report about quarterly sales performance."
  }]

  report_result = report_runner.run(report_messages)
  puts "Report generation result: #{report_result.final_output}"
rescue StandardError => e
  puts "Report generation error: #{e.message}"
end

puts

# ============================================================================
# EXAMPLE 6: DOCUMENT ANALYSIS AND GENERATION
# ============================================================================

puts "6. Document analysis and generation:"

# Define analysis tools
def analyze_data(data:, analysis_type: "summary")
  # Simulate data analysis
  case analysis_type.downcase
  when "summary"
    "Data summary: #{data.size} records analyzed. Key trends identified."
  when "trend"
    "Trend analysis: Upward trend detected in 75% of metrics."
  when "comparison"
    "Comparison analysis: Performance improved by 15% over previous period."
  else
    "Analysis type '#{analysis_type}' not supported."
  end
end

def generate_insights(data:, focus_area: "general")
  # Simulate insight generation
  "Generated insights for #{focus_area}: Key findings and recommendations prepared."
end

# Create a comprehensive document agent
doc_analysis_agent = OpenAIAgents::Agent.new(
  name: "DocumentAnalysisAgent",
  instructions: "You are a data analysis and document generation specialist. Analyze data and create comprehensive documents with insights and recommendations.",
  model: "gpt-4o"
)

# Add multiple tools
doc_analysis_agent.add_tool(document_tool)
doc_analysis_agent.add_tool(method(:analyze_data))
doc_analysis_agent.add_tool(method(:generate_insights))

# Create runner
doc_analysis_runner = OpenAIAgents::Runner.new(agent: doc_analysis_agent)

# Test comprehensive document generation
begin
  doc_analysis_messages = [{
    role: "user",
    content: "Analyze sales data and create a comprehensive PDF report with trends, insights, and recommendations."
  }]

  doc_analysis_result = doc_analysis_runner.run(doc_analysis_messages)
  puts "Document analysis result: #{doc_analysis_result.final_output}"
rescue StandardError => e
  puts "Document analysis error: #{e.message}"
end

puts

# ============================================================================
# EXAMPLE 7: TEMPLATE-BASED GENERATION
# ============================================================================

puts "7. Template-based generation:"

# Create template directory and sample template
template_dir = File.join(document_tool.output_dir, "templates")
FileUtils.mkdir_p(template_dir) unless Dir.exist?(template_dir)

# Create a sample PDF template
sample_template = {
  "font" => "Times-Roman",
  "line_spacing" => 1.2,
  "header" => "Company Confidential",
  "footer" => "Page {{page}} of {{total_pages}}"
}

template_file = File.join(template_dir, "corporate.yml")
unless File.exist?(template_file)
  File.write(template_file, sample_template.to_yaml)
  puts "Created sample template: #{template_file}"
end

# Test template-based generation
puts "\nGenerating document with template:"
begin
  template_result = document_tool.call(
    format: "pdf",
    filename: "templated_document",
    title: "Corporate Report",
    template: "corporate",
    content: {
      sections: [
        {
          heading: "Executive Summary",
          text: "This document was generated using a corporate template."
        },
        {
          heading: "Key Points",
          list: [
            "Template support for consistent branding",
            "Configurable fonts and styling",
            "Header and footer customization",
            "YAML-based template configuration"
          ]
        }
      ]
    }
  )
  
  if template_result[:success]
    puts "✅ Template document generated: #{template_result[:filepath]}"
  else
    puts "❌ Template generation failed: #{template_result[:error]}"
  end
rescue StandardError => e
  puts "❌ Template generation error: #{e.message}"
end

puts

# ============================================================================
# EXAMPLE 8: MULTI-FORMAT DOCUMENT GENERATION
# ============================================================================

puts "8. Multi-format document generation:"

# Create an agent that generates the same content in multiple formats
multi_format_agent = OpenAIAgents::Agent.new(
  name: "MultiFormatAgent",
  instructions: "You are a multi-format document generator. Create the same content in PDF, Word, and Excel formats for maximum compatibility.",
  model: "gpt-4o"
)

# Add document tool
multi_format_agent.add_tool(document_tool)

# Create runner
multi_format_runner = OpenAIAgents::Runner.new(agent: multi_format_agent)

# Test multi-format generation
begin
  multi_format_messages = [{
    role: "user",
    content: "Create a project status report in PDF, Word, and Excel formats."
  }]

  multi_format_result = multi_format_runner.run(multi_format_messages)
  puts "Multi-format generation result: #{multi_format_result.final_output}"
rescue StandardError => e
  puts "Multi-format generation error: #{e.message}"
end

puts

# ============================================================================
# EXAMPLE 9: DOCUMENT VALIDATION AND QUALITY CHECKS
# ============================================================================

puts "9. Document validation and quality checks:"

# Define validation tools
def validate_document(filepath:, format:)
  # Simulate document validation
  if File.exist?(filepath)
    size = File.size(filepath)
    case format.downcase
    when "pdf"
      size > 1000 ? "PDF validation: Document structure valid" : "PDF validation: Document too small"
    when "docx", "word"
      size > 5000 ? "Word validation: Document format valid" : "Word validation: Document incomplete"
    when "xlsx", "excel"
      size > 3000 ? "Excel validation: Spreadsheet structure valid" : "Excel validation: Insufficient data"
    else
      "Validation: Unknown format"
    end
  else
    "Validation: File not found"
  end
end

def quality_check(filepath:, criteria: ["content", "formatting", "structure"])
  # Simulate quality checking
  "Quality check for #{File.basename(filepath)}: #{criteria.join(", ")} reviewed. Score: 85/100"
end

# Create a validation agent
validation_agent = OpenAIAgents::Agent.new(
  name: "ValidationAgent",
  instructions: "You are a document quality assurance specialist. Generate documents and validate their quality and structure.",
  model: "gpt-4o"
)

# Add validation tools
validation_agent.add_tool(document_tool)
validation_agent.add_tool(method(:validate_document))
validation_agent.add_tool(method(:quality_check))

# Create runner
validation_runner = OpenAIAgents::Runner.new(agent: validation_agent)

# Test document validation
begin
  validation_messages = [{
    role: "user",
    content: "Create a technical specification document and validate its quality."
  }]

  validation_result = validation_runner.run(validation_messages)
  puts "Document validation result: #{validation_result.final_output}"
rescue StandardError => e
  puts "Document validation error: #{e.message}"
end

puts

# ============================================================================
# EXAMPLE 10: AUTOMATED DOCUMENT WORKFLOWS
# ============================================================================

puts "10. Automated document workflows:"

# Define workflow tools
def collect_data(source:, data_type: "general")
  # Simulate data collection
  case data_type.downcase
  when "sales"
    "Sales data collected: 150 records from #{source}"
  when "financial"
    "Financial data collected: Q4 2024 data from #{source}"
  when "user"
    "User data collected: 500 user records from #{source}"
  else
    "Data collected: #{data_type} data from #{source}"
  end
end

def process_workflow(steps:, document_type: "report")
  # Simulate workflow processing
  "Workflow processed: #{steps.size} steps completed for #{document_type} generation"
end

# Create a workflow automation agent
workflow_agent = OpenAIAgents::Agent.new(
  name: "WorkflowAgent",
  instructions: "You are a document workflow automation specialist. Collect data, process it, and generate comprehensive documents automatically.",
  model: "gpt-4o"
)

# Add workflow tools
workflow_agent.add_tool(document_tool)
workflow_agent.add_tool(method(:collect_data))
workflow_agent.add_tool(method(:process_workflow))

# Create runner
workflow_runner = OpenAIAgents::Runner.new(agent: workflow_agent)

# Test automated workflow
begin
  workflow_messages = [{
    role: "user",
    content: "Set up an automated workflow to collect sales data and generate a monthly report."
  }]

  workflow_result = workflow_runner.run(workflow_messages)
  puts "Automated workflow result: #{workflow_result.final_output}"
rescue StandardError => e
  puts "Automated workflow error: #{e.message}"
end

puts

# ============================================================================
# DEPENDENCY CHECK
# ============================================================================

puts "=== Dependency Check ==="

# Check for required gems
required_gems = [
  { name: "prawn", purpose: "PDF generation" },
  { name: "docx", purpose: "Word document generation" },
  { name: "rubyXL", purpose: "Excel spreadsheet generation" }
]

required_gems.each do |gem_info|
  begin
    require gem_info[:name]
    puts "✅ #{gem_info[:name]} - Available (#{gem_info[:purpose]})"
  rescue LoadError
    puts "❌ #{gem_info[:name]} - Not installed (#{gem_info[:purpose]})"
    puts "   Install with: gem install #{gem_info[:name]}"
  end
end

puts

# ============================================================================
# CONFIGURATION DISPLAY
# ============================================================================

puts "=== Document Tool Configuration ==="
puts "Tool name: #{document_tool.name}"
puts "Description: #{document_tool.description}"
puts "Output directory: #{document_tool.output_dir}"
puts "Supported formats: PDF, Word (DOCX), Excel (XLSX), CSV"
puts "Template support: Yes (YAML configuration)"
puts "Content types: Text, Lists, Tables, Images, Structured data"

# ============================================================================
# SUMMARY
# ============================================================================

puts "\n=== Example Complete ==="
puts
puts "Key Document Tool Features:"
puts "1. Multi-format support (PDF, Word, Excel, CSV)"
puts "2. Structured content with headings, lists, and tables"
puts "3. Template-based generation with YAML configuration"
puts "4. Professional formatting and styling"
puts "5. Report generation with analytics support"
puts "6. Document validation and quality checks"
puts "7. Automated workflow integration"
puts "8. Image and media embedding support"
puts "9. Formula and calculation support (Excel)"
puts "10. Metadata and document properties"
puts
puts "Supported Content Types:"
puts "- Text: Plain text and formatted content"
puts "- Lists: Bulleted and numbered lists"
puts "- Tables: Headers, data rows, and formatting"
puts "- Images: Embedded images and graphics"
puts "- Formulas: Excel formulas and calculations"
puts "- Metadata: Document properties and information"
puts
puts "Best Practices:"
puts "- Use templates for consistent branding"
puts "- Structure content with sections and headings"
puts "- Validate documents after generation"
puts "- Implement quality checks for professional output"
puts "- Use appropriate formats for different use cases"
puts "- Test with different content types and sizes"
puts "- Monitor file sizes and performance"
puts "- Backup important documents and templates"
puts
puts "Dependencies:"
puts "- prawn: PDF generation"
puts "- docx: Word document support"
puts "- rubyXL: Excel spreadsheet support"
puts "- yaml: Template configuration"
puts "- csv: CSV file support (built-in)"
puts
puts "Use Cases:"
puts "- Business reports and presentations"
puts "- Technical documentation"
puts "- Financial statements and budgets"
puts "- Project proposals and specifications"
puts "- Data analysis and visualization"
puts "- Invoice and contract generation"
puts "- Training materials and manuals"
puts "- Compliance and audit reports"
# Minimal RuboCop configuration for raaf-dsl
# Explicitly do not inherit from parent configs
inherit_from: []

plugins:
  - rubocop-rspec
  - rubocop-rake

AllCops:
  TargetRubyVersion: 3.0
  NewCops: enable
  SuggestExtensions: false
  Exclude:
    - 'vendor/**/*'
    - 'tmp/**/*'
    - 'bin/**/*'
    - 'pkg/**/*'

# Layout rules
Layout/LineLength:
  Max: 120
  Exclude:
    - 'examples/**/*'  # Examples can have longer lines for readability
    - 'raaf-dsl.gemspec'  # Gemspec descriptions can be long
    - 'lib/**/*'  # Allow longer lines in library code for clarity
    - 'spec/**/*'  # Allow longer lines in test files for clarity

# Metrics rules - relaxed for DSL complexity
Metrics/AbcSize:
  Max: 100  # DSL builders handle complex configurations

Metrics/MethodLength:
  Max: 80  # DSL methods need comprehensive parameter handling
  Exclude:
    - 'examples/**/*'  # Examples can be long for demonstration

Metrics/ClassLength:
  Max: 500  # DSL classes are inherently large

Metrics/ModuleLength:
  Max: 700  # DSL modules contain many helper methods

Metrics/BlockLength:
  Max: 250  # DSL blocks need many configuration options
  Exclude:
    - 'spec/**/*'
    - 'examples/**/*'

Metrics/CyclomaticComplexity:
  Max: 25  # Provider conditionals for different API formats

Metrics/PerceivedComplexity:
  Max: 25

Metrics/ParameterLists:
  Max: 15  # API methods need many optional parameters

Metrics/BlockNesting:
  Max: 4  # Streaming response parsing requires nesting

# Style rules
Style/Documentation:
  Enabled: false

Style/StringLiterals:
  EnforcedStyle: double_quotes

Style/FrozenStringLiteralComment:
  Enabled: true

Style/HashLikeCase:
  Enabled: false  # Provider model selection uses meaningful case statements

Style/ClassVars:
  Enabled: false  # Allow class variables in builders for counting

Style/StringConcatenation:
  Enabled: false  # Allow string concatenation when needed

Style/EmptyElse:
  Enabled: false  # Allow empty else clauses for clarity

Style/MultilineBlockChain:
  Enabled: false  # Allow chained blocks when needed

# Gemspec rules
Gemspec/DevelopmentDependencies:
  Enabled: false

# Naming rules
Naming/FileName:
  Enabled: false

Naming/PredicateMethod:
  Enabled: false  # Provider helper methods don't always follow predicate naming

Naming/AccessorMethodName:
  Enabled: false  # Allow get_ prefixed methods when appropriate

Naming/PredicatePrefix:
  Enabled: false  # Allow has_ prefixed predicates

# Security rules - allow eval in specific contexts
Security/Eval:
  Exclude:
    - 'examples/**/*'
    - 'lib/raaf/dsl/configuration_builder.rb'  # Needed for dynamic config loading

# Lint rules
Lint/UnusedMethodArgument:
  Enabled: false

Lint/MissingSuper:
  Enabled: false  # Provider initialization patterns don't always require super

Lint/DuplicateBranch:
  Enabled: false  # Provider conditionals may have similar branches for different APIs

# Basic RSpec rules only
RSpec/ExampleLength:
  Enabled: false  # Allow long examples for comprehensive testing

RSpec/MultipleExpectations:
  Enabled: false  # Allow multiple expectations in comprehensive tests

RSpec/DescribeClass:
  Enabled: false

RSpec/SpecFilePathSuffix:
  Enabled: false  # Provider specs don't follow deep directory structure

RSpec/SpecFilePathFormat:
  Enabled: false  # Provider specs use flat structure

# Additional RSpec configuration
RSpec/VerifiedDoubles:
  Enabled: false  # Allow normal doubles in tests

RSpec/MessageSpies:
  Enabled: false  # Allow receive expectations

RSpec/InstanceVariable:
  Enabled: false  # Allow instance variables in tests

RSpec/LeakyConstantDeclaration:
  Enabled: false  # Allow class declarations in tests

RSpec/ContextWording:
  Enabled: false  # Allow flexible context descriptions

RSpec/BeforeAfterAll:
  Enabled: false  # Allow before(:all) when needed

RSpec/IndexedLet:
  Enabled: false  # Allow indexed let statements

RSpec/IteratedExpectation:
  Enabled: false  # Allow iteration in expectations

RSpec/NamedSubject:
  Enabled: false  # Allow unnamed subjects

RSpec/RepeatedExample:
  Enabled: false  # Allow repeated examples when needed

RSpec/MultipleDescribes:
  Enabled: false  # Allow multiple describes in one file

RSpec/ExpectActual:
  Enabled: false  # Allow flexible expect usage

RSpec/IdenticalEqualityAssertion:
  Enabled: false  # Allow identical equality assertions when testing constants

# Modern RSpec cops configuration
RSpec/NestedGroups:
  Enabled: false  # Allow deep nesting for comprehensive test organization

RSpec/MultipleMemoizedHelpers:
  Enabled: false  # Allow many helpers for complex test setups

# Disable problematic/deprecated cops
RSpec/PredicateMatcher:
  Enabled: false
name: ‚ö° Providers Quick Check - Fast Development Feedback

on:
  push:
    branches: [ feature/*, fix/*, hotfix/* ]
    paths: 
      - 'providers/**'
      - '.github/workflows/providers-quick-check.yml'

# Quick feedback for development branches
env:
  RUBY_VERSION: '3.4.5'
  DEFAULT_RUBY_VERSION: '3.4.5'

jobs:
  # Super fast checks for immediate feedback
  quick-lint:
    name: "‚ö° Quick Lint"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Providers gem)
      run: |
        cd providers
        bundle install

    - name: Run RuboCop (Providers gem)
      run: |
        cd providers
        bundle exec rubocop --parallel

  # Essential unit tests only
  essential-tests:
    name: "üß™ Essential Tests"
    runs-on: ubuntu-latest
    needs: quick-lint
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Providers gem)
      run: |
        cd providers
        bundle install

    - name: Run essential unit tests (Providers gem)
      run: |
        cd providers
        # Run only the most critical unit tests for fast feedback
        bundle exec rspec \
          spec/providers/*_spec.rb \
          spec/models/ \
          --format progress \
          --fail-fast
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY_TEST }}
        TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY_TEST }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY_TEST }}
        LITELLM_API_KEY: ${{ secrets.LITELLM_API_KEY_TEST }}

  # Smoke test - basic functionality
  smoke-test:
    name: "üí® Smoke Test"
    runs-on: ubuntu-latest
    needs: essential-tests
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Providers gem)
      run: |
        cd providers
        bundle install

    - name: Build and test gem loading
      run: |
        cd providers
        gem build raaf-providers.gemspec
        gem install --local raaf-providers-*.gem
        ruby -r raaf-providers -e "puts 'Providers gem loads successfully'"

    - name: Run basic functionality test
      run: |
        cd providers
        ruby -r raaf-providers -e "
          # Test basic provider loading
          puts 'Testing OpenAI ResponsesProvider...'
          provider = RAAF::Models::ResponsesProvider.new(api_key: 'test-key')
          puts 'ResponsesProvider created successfully: ' + provider.provider_name
          
          puts 'Testing multi-provider loading...'
          multi = RAAF::Models::MultiProvider.new(providers: [
            { name: 'openai', provider: provider }
          ])
          puts 'MultiProvider created successfully with ' + multi.providers.length.to_s + ' providers'
        "

  # Provider compatibility test
  provider-compatibility:
    name: "üîå Provider Compatibility"
    runs-on: ubuntu-latest
    needs: essential-tests
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Providers gem)
      run: |
        cd providers
        bundle install

    - name: Test provider interface compatibility
      run: |
        cd providers
        ruby -r raaf-providers -e "
          # Test that all providers implement the required interface
          providers = [
            RAAF::Models::ResponsesProvider,
            RAAF::Models::OpenAIProvider,
            RAAF::Models::AnthropicProvider,
            RAAF::Models::CohereProvider,
            RAAF::Models::GroqProvider,
            RAAF::Models::TogetherProvider,
            RAAF::Models::LitellmProvider
          ]
          
          providers.each do |provider_class|
            puts \"Testing #{provider_class.name} interface...\"
            
            # Check required methods exist
            required_methods = [:chat_completion, :provider_name, :supported_models]
            required_methods.each do |method|
              unless provider_class.instance_methods.include?(method)
                raise \"#{provider_class.name} missing required method: #{method}\"
              end
            end
            
            puts \"‚úÖ #{provider_class.name} interface OK\"
          end
          
          puts 'All provider interfaces are compatible!'
        "

  # Status check for PR
  quick-check-status:
    name: "‚úì Quick Check Status"
    runs-on: ubuntu-latest
    needs: [quick-lint, essential-tests, smoke-test, provider-compatibility]
    if: always()
    
    steps:
    - name: Check results
      run: |
        echo "## Providers Quick Check Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.quick-lint.result }}" == "success" ]]; then
          echo "‚úÖ Quick Lint: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Quick Lint: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.essential-tests.result }}" == "success" ]]; then
          echo "‚úÖ Essential Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Essential Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.smoke-test.result }}" == "success" ]]; then
          echo "‚úÖ Smoke Test: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Smoke Test: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.provider-compatibility.result }}" == "success" ]]; then
          echo "‚úÖ Provider Compatibility: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Provider Compatibility: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.quick-lint.result }}" == "success" && "${{ needs.essential-tests.result }}" == "success" && "${{ needs.smoke-test.result }}" == "success" && "${{ needs.provider-compatibility.result }}" == "success" ]]; then
          echo "üéâ All provider quick checks passed! Ready for full CI." >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Some provider quick checks failed. Fix these before running full CI." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Fail if quick checks failed
      if: needs.quick-lint.result != 'success' || needs.essential-tests.result != 'success' || needs.smoke-test.result != 'success' || needs.provider-compatibility.result != 'success'
      run: |
        echo "‚ùå Provider quick checks failed. See summary above."
        exit 1
name: Core CI

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'core/**'
      - '.github/workflows/core-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'core/**'
      - '.github/workflows/core-ci.yml'

# Fail fast - stop all jobs if critical early jobs fail
env:
  RUBY_VERSION: '3.2'

jobs:
  # Stage 1: Basic validation (fastest feedback)
  lint:
    name: "üîç Lint & Style"
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Core gem)
      run: |
        cd core
        bundle install

    - name: Run RuboCop (Core gem)
      run: |
        cd core
        bundle exec rubocop

    - name: Check bundle audit (Core gem)
      run: |
        cd core
        gem install bundler-audit
        bundle audit check --update

  # Stage 2: Unit tests (core functionality)
  unit-tests:
    name: "üß™ Unit Tests"
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: true
      matrix:
        ruby-version: ['3.2', '3.3', '3.4']
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true

    - name: Install dependencies (Core gem)
      run: |
        cd core
        bundle install

    - name: Run unit tests and models (Core gem)
      run: |
        cd core
        bundle exec rspec --exclude-pattern "spec/{acceptance,compliance,cost,edge_cases,integration,performance}/**/*_spec.rb" \
                         --format progress \
                         --format RspecJunitFormatter \
                         --out test-results-unit.xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}

    - name: Upload unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: unit-test-results-${{ matrix.ruby-version }}
        path: core/test-results-unit.xml

  # Stage 3: Parallel tests (run simultaneously after unit tests)
  edge-cases-tests:
    name: "‚ö†Ô∏è Edge Cases"
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Core gem)
      run: |
        cd core
        bundle install

    - name: Run edge cases tests (Core gem)
      run: |
        cd core
        bundle exec rspec spec/edge_cases/ \
                         --format progress \
                         --format RspecJunitFormatter \
                         --out test-results-edge-cases.xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}

    - name: Upload edge cases test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: edge-cases-test-results
        path: core/test-results-edge-cases.xml

  integration-tests:
    name: "üîó Integration Tests"
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Core gem)
      run: |
        cd core
        bundle install

    - name: Run integration tests (Core gem)
      run: |
        cd core
        RUN_INTEGRATION_TESTS=true bundle exec rspec spec/integration/ \
                         --format progress \
                         --format RspecJunitFormatter \
                         --out test-results-integration.xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: core/test-results-integration.xml

  compliance-tests:
    name: "üìã Compliance Tests"
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Core gem)
      run: |
        cd core
        bundle install

    - name: Run compliance tests (Core gem)
      run: |
        cd core
        bundle exec rspec spec/compliance/ \
                         --format progress \
                         --format RspecJunitFormatter \
                         --out test-results-compliance.xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}

    - name: Upload compliance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: compliance-test-results
        path: core/test-results-compliance.xml

  # Stage 4: Acceptance tests (end-to-end scenarios)
  acceptance-tests:
    name: "‚úÖ Acceptance Tests"
    runs-on: ubuntu-latest
    needs: [edge-cases-tests, integration-tests, compliance-tests]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Core gem)
      run: |
        cd core
        bundle install

    - name: Run acceptance tests (Core gem)
      run: |
        cd core
        RUN_ACCEPTANCE_TESTS=true bundle exec rspec spec/acceptance/ \
                         --format progress \
                         --format RspecJunitFormatter \
                         --out test-results-acceptance.xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}

    - name: Upload acceptance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: acceptance-test-results
        path: core/test-results-acceptance.xml

  # Stage 5: Build verification (package validation)
  build:
    name: "üì¶ Build Gem"
    runs-on: ubuntu-latest
    needs: acceptance-tests  # Build after acceptance tests pass
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Core gem)
      run: |
        cd core
        bundle install

    - name: Build gem (Core gem)
      run: |
        cd core
        gem build raaf-core.gemspec

    - name: Validate gem (Core gem)
      run: |
        cd core
        gem install --local raaf-core-*.gem
        ruby -r raaf-core -e "puts 'Core gem loads successfully'"

    - name: Upload gem artifact
      uses: actions/upload-artifact@v4
      with:
        name: raaf-core-gem
        path: core/raaf-core-*.gem

  # Stage 6: Performance tests (resource intensive - run in parallel)
  performance-tests:
    name: "‚ö° Performance Tests"
    runs-on: ubuntu-latest
    needs: unit-tests
    continue-on-error: true  # Don't fail CI if performance tests are flaky
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Core gem)
      run: |
        cd core
        bundle install

    - name: Run performance tests (Core gem)
      run: |
        cd core
        RUN_PERFORMANCE_TESTS=true bundle exec rspec spec/performance/ \
                         --format progress \
                         --format RspecJunitFormatter \
                         --out test-results-performance.xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}

    - name: Upload performance test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: performance-test-results
        path: core/test-results-performance.xml

  # Stage 7: Cost analysis tests (expensive operations - run in parallel)
  cost-tests:
    name: "üí∞ Cost Analysis Tests"
    runs-on: ubuntu-latest
    needs: unit-tests
    continue-on-error: true  # Don't fail CI if cost tests are flaky
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Core gem)
      run: |
        cd core
        bundle install

    - name: Run cost analysis tests (Core gem)
      run: |
        cd core
        RUN_COST_TESTS=true bundle exec rspec spec/cost/ \
                         --format progress \
                         --format RspecJunitFormatter \
                         --out test-results-cost.xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}

    - name: Upload cost test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cost-test-results
        path: core/test-results-cost.xml

  # Final status job - summarizes all results
  test-summary:
    name: "üìä Test Summary"
    runs-on: ubuntu-latest
    needs: [lint, unit-tests, edge-cases-tests, integration-tests, compliance-tests, acceptance-tests, build]
    if: always()
    
    steps:
    - name: Check test results
      run: |
        echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.lint.result }}" == "success" ]]; then
          echo "‚úÖ Lint & Style: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Lint & Style: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.unit-tests.result }}" == "success" ]]; then
          echo "‚úÖ Unit Tests & Models: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Unit Tests & Models: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.edge-cases-tests.result }}" == "success" ]]; then
          echo "‚úÖ Edge Cases: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Edge Cases: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo "‚úÖ Integration Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Integration Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.compliance-tests.result }}" == "success" ]]; then
          echo "‚úÖ Compliance Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Compliance Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.acceptance-tests.result }}" == "success" ]]; then
          echo "‚úÖ Acceptance Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Acceptance Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.build.result }}" == "success" ]]; then
          echo "‚úÖ Build: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Build: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Performance and Cost tests run independently and don't affect CI status." >> $GITHUB_STEP_SUMMARY

    - name: Fail if critical tests failed
      if: needs.lint.result != 'success' || needs.unit-tests.result != 'success' || needs.edge-cases-tests.result != 'success' || needs.integration-tests.result != 'success' || needs.compliance-tests.result != 'success' || needs.acceptance-tests.result != 'success' || needs.build.result != 'success'
      run: |
        echo "‚ùå Critical tests failed. See summary above."
        exit 1
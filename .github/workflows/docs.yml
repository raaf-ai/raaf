name: Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-docs:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Install dependencies
      run: bundle install

    - name: Generate YARD documentation
      run: |
        bundle exec yard doc --output-dir ./doc
        echo "Documentation generated in ./doc"

    - name: Check documentation coverage
      run: |
        bundle exec yard stats --list-undoc > undocumented.txt
        echo "Documentation coverage report:"
        bundle exec yard stats
        if [ -s undocumented.txt ]; then
          echo "‚ö†Ô∏è Undocumented methods found:"
          cat undocumented.txt
        else
          echo "‚úÖ All public methods are documented"
        fi

    # - name: Validate README examples
    #   run: |
    #     echo "Validating README.md examples..."
    #     # Extract Ruby code blocks from README and validate syntax
    #     grep -A 50 "```ruby" README.md | grep -B 50 "```" | grep -v "```" > readme_examples.rb || true
    #     if [ -s readme_examples.rb ]; then
    #       echo "Checking syntax of README examples..."
    #       ruby -c readme_examples.rb || echo "‚ö†Ô∏è README examples may have syntax issues"
    #     fi

    # - name: Check EXAMPLES.md
    #   run: |
    #     if [ -f EXAMPLES.md ]; then
    #       echo "‚úÖ EXAMPLES.md found"
    #       echo "Examples file size: $(wc -l < EXAMPLES.md) lines"
    #       # Validate example code blocks
    #       grep -A 50 "```ruby" EXAMPLES.md | grep -B 50 "```" | grep -v "```" > examples_code.rb || true
    #       if [ -s examples_code.rb ]; then
    #         echo "Validating EXAMPLES.md code syntax..."
    #         ruby -c examples_code.rb || echo "‚ö†Ô∏è Examples may have syntax issues"
    #       fi
    #     else
    #       echo "‚ö†Ô∏è EXAMPLES.md not found"
    #     fi

    - name: Upload documentation
      uses: actions/upload-artifact@v4
      with:
        name: documentation
        path: |
          doc/
          undocumented.txt
        retention-days: 30

  # deploy-docs:
  #   runs-on: ubuntu-latest
  #   needs: build-docs
  #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Set up Ruby
  #     uses: ruby/setup-ruby@v1
  #     with:
  #       ruby-version: '3.2'
  #       bundler-cache: true

  #   - name: Install dependencies
  #     run: bundle install

  #   - name: Generate documentation
  #     run: |
  #       bundle exec yard doc --output-dir ./doc

  #   # Note: GitHub Pages deployment requires Pages to be enabled in repository settings
  #   # Uncomment below if you have enabled GitHub Pages for your repository
  #   # - name: Deploy to GitHub Pages
  #   #   uses: peaceiris/actions-gh-pages@v3
  #   #   with:
  #   #     github_token: ${{ secrets.GITHUB_TOKEN }}
  #   #     publish_dir: ./doc
  #   #     # cname: docs.openai-agents-ruby.org  # Optional: set your custom domain
  #   #     commit_message: |
  #   #       üìö Update documentation
  #   #       
  #   #       ü§ñ Generated with [Claude Code](https://claude.ai/code)

  # link-check:
  #   runs-on: ubuntu-latest

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Check markdown links
  #     uses: gaurav-nelson/github-action-markdown-link-check@v1
  #     with:
  #       use-quiet-mode: 'yes'
  #       use-verbose-mode: 'yes'
  #       config-file: '.github/markdown-link-check-config.json'
  #       folder-path: '.'
  #       file-extension: '.md'

  spell-check:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Spell check documentation
      uses: streetsidesoftware/cspell-action@v2
      with:
        files: |
          README.md
          EXAMPLES.md
          CHANGELOG.md
          CLAUDE.md
          lib/**/*.rb
        config: '.cspell.json'
        incremental_files_only: false

  doc-quality:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.2'
        bundler-cache: true

    - name: Install dependencies
      run: bundle install

    - name: Check documentation quality
      run: |
        echo "üìä Documentation Quality Report"
        echo "================================"
        
        # Count lines in documentation files
        echo "üìÑ Documentation files:"
        for file in README.md EXAMPLES.md CHANGELOG.md CLAUDE.md; do
          if [ -f "$file" ]; then
            lines=$(wc -l < "$file")
            echo "  $file: $lines lines"
          fi
        done
        
        # Count code comments
        echo ""
        echo "üí¨ Code documentation:"
        comment_lines=$(find lib -name "*.rb" -exec grep -c "^\s*#" {} \; | paste -sd+ | bc || echo "0")
        code_lines=$(find lib -name "*.rb" -exec wc -l {} \; | awk '{sum += $1} END {print sum}' || echo "0")
        if [ "$code_lines" -gt 0 ]; then
          ratio=$(echo "scale=2; $comment_lines * 100 / $code_lines" | bc -l || echo "0")
          echo "  Comment lines: $comment_lines"
          echo "  Code lines: $code_lines"
          echo "  Comment ratio: $ratio%"
        fi
        
        # Check for example files
        echo ""
        echo "üìö Examples:"
        example_count=$(find examples -name "*.rb" 2>/dev/null | wc -l || echo "0")
        echo "  Example files: $example_count"
        
        # Check for test coverage of examples
        echo ""
        echo "üß™ Test coverage:"
        spec_count=$(find spec -name "*_spec.rb" 2>/dev/null | wc -l || echo "0")
        echo "  Spec files: $spec_count"
name: ‚ö° DSL Quick Check - Fast Development Feedback

on:
  push:
    branches: [ feature/*, fix/*, hotfix/* ]
    paths: 
      - 'dsl/**'
      - '.github/workflows/dsl-quick-check.yml'
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug logging'
        required: false
        type: boolean
        default: false

# Quick feedback for development branches
env:
  RUBY_VERSION: '3.3'
  DEFAULT_RUBY_VERSION: '3.3'

jobs:
  # Super fast checks for immediate feedback
  quick-lint:
    name: "‚ö° Quick Lint"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (DSL gem)
      run: |
        cd dsl
        bundle install

    - name: Run RuboCop (DSL gem)
      run: |
        cd dsl
        bundle exec rubocop --parallel

  # Essential unit tests only
  essential-tests:
    name: "üß™ Essential Tests"
    runs-on: ubuntu-latest
    needs: quick-lint
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (DSL gem)
      run: |
        cd dsl
        bundle install

    - name: Run essential unit tests (DSL gem)
      run: |
        cd dsl
        # Run only the most critical unit tests for fast feedback
        bundle exec rspec \
          spec/raaf/dsl/*_spec.rb \
          spec/raaf/dsl/agent_dsl/ \
          spec/raaf/dsl/agents/ \
          --format progress \
          --fail-fast
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY_TEST }}

  # Smoke test - basic functionality
  smoke-test:
    name: "üí® Smoke Test"
    runs-on: ubuntu-latest
    needs: essential-tests
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (DSL gem)
      run: |
        cd dsl
        bundle install

    - name: Build and test gem loading
      run: |
        cd dsl
        gem build raaf-dsl.gemspec
        gem install --local raaf-dsl-*.gem
        ruby -r raaf-dsl -e "puts 'DSL gem loads successfully'"

    - name: Run basic functionality test
      run: |
        cd dsl
        ruby -r raaf-dsl -e "
          # Test basic DSL functionality
          puts 'Testing AgentBuilder...'
          agent = RAAF::DSL::AgentBuilder.build do
            name 'TestAgent'
            instructions 'Test agent'
            model 'gpt-4o'
          end
          puts 'AgentBuilder created successfully: ' + agent.name
          
          puts 'Testing prompt resolution...'
          resolver = RAAF::DSL::PromptResolver.new
          puts 'PromptResolver created successfully'
          
          puts 'Testing debugging utilities...'
          debug_result = RAAF::DSL::DebugUtils.inspect_agent(agent)
          puts 'DebugUtils working successfully'
        "

  # DSL feature validation
  dsl-features:
    name: "üé® DSL Features"
    runs-on: ubuntu-latest
    needs: essential-tests
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (DSL gem)
      run: |
        cd dsl
        bundle install

    - name: Test DSL feature compatibility
      run: |
        cd dsl
        ruby -r raaf-dsl -e "
          # Test core DSL features
          features = []
          
          puts 'Testing AgentBuilder DSL...'
          begin
            agent = RAAF::DSL::AgentBuilder.build do
              name 'FeatureTest'
              instructions 'Test'
              model 'gpt-4o'
              
              tool :test_tool do |input|
                { result: input }
              end
            end
            features << 'AgentBuilder DSL'
          rescue => e
            puts \"‚ùå AgentBuilder DSL failed: #{e.message}\"
            raise
          end
          
          puts 'Testing WorkflowBuilder...'
          begin
            workflow = RAAF::DSL::WorkflowBuilder.build do
              name 'TestWorkflow'
              description 'Test workflow'
            end
            features << 'WorkflowBuilder'
          rescue => e
            puts \"‚ùå WorkflowBuilder failed: #{e.message}\"
            raise
          end
          
          puts 'Testing prompt resolution...'
          begin
            resolver = RAAF::DSL::PromptResolver.new
            features << 'Prompt Resolution'
          rescue => e
            puts \"‚ùå Prompt Resolution failed: #{e.message}\"
            raise
          end
          
          puts \"‚úÖ All DSL features working: #{features.join(', ')}\"
        "

  # Status check for PR
  quick-check-status:
    name: "‚úì Quick Check Status"
    runs-on: ubuntu-latest
    needs: [quick-lint, essential-tests, smoke-test, dsl-features]
    if: always()
    
    steps:
    - name: Check results
      run: |
        echo "## DSL Quick Check Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.quick-lint.result }}" == "success" ]]; then
          echo "‚úÖ Quick Lint: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Quick Lint: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.essential-tests.result }}" == "success" ]]; then
          echo "‚úÖ Essential Tests: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Essential Tests: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.smoke-test.result }}" == "success" ]]; then
          echo "‚úÖ Smoke Test: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Smoke Test: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.dsl-features.result }}" == "success" ]]; then
          echo "‚úÖ DSL Features: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå DSL Features: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.quick-lint.result }}" == "success" && "${{ needs.essential-tests.result }}" == "success" && "${{ needs.smoke-test.result }}" == "success" && "${{ needs.dsl-features.result }}" == "success" ]]; then
          echo "üéâ All DSL quick checks passed! Ready for full CI." >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå Some DSL quick checks failed. Fix these before running full CI." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Fail if quick checks failed
      if: needs.quick-lint.result != 'success' || needs.essential-tests.result != 'success' || needs.smoke-test.result != 'success' || needs.dsl-features.result != 'success'
      run: |
        echo "‚ùå DSL quick checks failed. See summary above."
        exit 1

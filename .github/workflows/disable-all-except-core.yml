# RAAF Core GitHub Actions Workflow Documentation
# 
# This file documents the GitHub Actions setup for the RAAF monorepo
# Currently focused on the core gem with comprehensive testing strategy

# ACTIVE WORKFLOWS:
# ================
# 
# 1. core-ci.yml - Main CI pipeline with staged testing
#    - 🔍 Lint & Style (Stage 1 - fastest feedback)
#    - 🧪 Unit Tests (Stage 2 - core functionality, Ruby 3.2/3.3/3.4)
#    - 🤖 Models & Providers (Stage 3 - critical integrations)
#    - ⚠️ Edge Cases (Stage 4 - boundary testing)
#    - 🔗 Integration Tests (Stage 5 - external dependencies)
#    - 📋 Compliance Tests (Stage 6 - standards validation, parallel)
#    - ✅ Acceptance Tests (Stage 7 - end-to-end scenarios)
#    - ⚡ Performance Tests (Stage 8 - resource intensive, continue-on-error)
#    - 💰 Cost Analysis Tests (Stage 9 - expensive operations, continue-on-error)
#    - 📦 Build Gem (Stage 10 - final validation, parallel after core tests)
#    - 📊 Test Summary (Final status aggregation)
# 
# 2. core-quick-check.yml - Fast feedback for development
#    - ⚡ Quick Lint (parallel RuboCop)
#    - 🧪 Essential Tests (agent, runner, models only)
#    - 💨 Smoke Test (basic gem loading and functionality)
#    - ✓ Quick Check Status (summary for PRs)
# 
# 3. core-nightly.yml - Comprehensive nightly testing
#    - 🌙 Comprehensive Tests (full matrix: Ubuntu/macOS/Windows × Ruby 3.2/3.3/3.4/head)
#    - 🧠 Memory Analysis (profiling, leak detection, GC stress testing)
#    - 🔒 Security Scan (bundle audit, Brakeman)
#    - 📊 Coverage Analysis (full test coverage reporting)
#    - 📈 Nightly Summary (comprehensive health report)

# FAIL-FAST STRATEGY:
# ===================
# Tests are ordered by:
# 1. Speed (fastest first for immediate feedback)
# 2. Criticality (most essential functionality first)
# 3. Dependencies (external dependencies later)
# 4. Resource usage (intensive tests last)
# 
# Performance and Cost tests use continue-on-error to prevent flaky failures
# from blocking deployments while still providing feedback.

# DISABLED LEGACY WORKFLOWS:
# ==========================
# The following workflows are commented out (focusing on core gem only):
# - ci.yml (replaced by core-ci.yml)
# - docs.yml (replaced by core-specific approach)
# - performance.yml (replaced by core-specific approach)  
# - security.yml (replaced by core-specific approach)
# - release.yml (already commented out - legacy gem structure)

# FUTURE GEM WORKFLOWS:
# =====================
# When other gems need CI/CD, create workflows based on core-ci.yml template:
# - tracing-ci.yml, memory-ci.yml, tools-ci.yml, guardrails-ci.yml
# - providers-ci.yml, dsl-ci.yml, rails-ci.yml, streaming-ci.yml
# - analytics-ci.yml, compliance-ci.yml, debug-ci.yml, guides-ci.yml
# - mcp-ci.yml, misc-ci.yml, testing-ci.yml
# 
# Template approach:
# 1. Copy core-ci.yml structure
# 2. Update paths to target specific gem directory
# 3. Update gem name and build commands appropriately
# 4. Adjust test categories based on gem's testing needs
name: 🚀 DSL CI - Complete Test Suite

on:
  push:
    branches: [ main, develop ]
    paths: 
      - 'dsl/**'
      - '.github/workflows/dsl-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'dsl/**'
      - '.github/workflows/dsl-ci.yml'
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: 'Enable debug logging'
        required: false
        type: boolean
        default: false

env:
  RUBY_VERSION: '3.4.5'
  DEFAULT_RUBY_VERSION: '3.4.5'

jobs:
  # Stage 1: Lint & Style (fastest feedback)
  lint:
    name: "🔍 Lint & Style"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (DSL gem)
      run: |
        cd dsl
        bundle install

    - name: Run RuboCop (DSL gem)
      run: |
        cd dsl
        bundle exec rubocop --parallel

    - name: Check bundle audit (DSL gem)
      run: |
        cd dsl
        gem install bundler-audit
        bundle audit check --update

  # Stage 2: Unit tests (only RSpec tests, no examples)
  test:
    name: "🧪 Unit Tests (Ruby ${{ matrix.ruby-version }})"
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: true
      matrix:
        ruby-version: ['3.2', '3.3', '3.4.5']
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true

    - name: Install dependencies (DSL gem)
      run: |
        cd dsl
        bundle install

    - name: Run unit tests
      run: |
        cd dsl
        bundle exec rspec --format progress \
                         --format RspecJunitFormatter \
                         --out test-results.xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY_TEST }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.ruby-version }}
        path: dsl/test-results.xml
        retention-days: 7

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always() && matrix.ruby-version == env.DEFAULT_RUBY_VERSION
      with:
        name: coverage-reports
        path: |
          dsl/coverage/
          !dsl/coverage/assets/
        retention-days: 14

  # Stage 3: Example validation (separate from unit tests)
  example-validation:
    name: "📝 Example Validation"
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Setup RAAF environment
      uses: ./.github/actions/setup-raaf-env
      with:
        target-gem: dsl
        skip-gem-dependencies: 'true'

    - name: Validate DSL examples only
      run: |
        cd dsl
        RAAF_TEST_MODE=true bundle exec rake code:validate_examples
      env:
        CI: true
        # Note: Using test mode to avoid requiring real API keys in CI
        # This validates example structure, syntax, and basic functionality

    - name: Upload example validation report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: example-validation-report
        path: dsl/example_validation_report.json
        retention-days: 7

  # Stage 3b: Documentation validation (separate job)
  documentation-validation:
    name: "📚 Documentation Validation"
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Setup RAAF environment
      uses: ./.github/actions/setup-raaf-env
      with:
        target-gem: dsl
        skip-gem-dependencies: 'true'

    - name: Validate DSL documentation code blocks
      run: |
        cd dsl
        RAAF_TEST_MODE=true bundle exec rake code:validate_documentation
      env:
        CI: true
        # This validates all code blocks in markdown files

    - name: Upload documentation validation report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: documentation-validation-report
        path: dsl/documentation_validation_report.json
        retention-days: 7

  # Stage 4: Build verification (package validation)
  build:
    name: "📦 Build Gem"
    runs-on: ubuntu-latest
    needs: [test, example-validation, documentation-validation]
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (DSL gem)
      run: |
        cd dsl
        bundle install

    - name: Test gem installation
      run: |
        cd core
        gem build raaf-core.gemspec
        gem install --local raaf-core-*.gem
        cd ../dsl
        gem build raaf-dsl.gemspec
        gem install --local raaf-dsl-*.gem
        ruby -r raaf-dsl -e "puts 'DSL gem loads successfully'"

    - name: Upload gem artifact
      uses: actions/upload-artifact@v4
      with:
        name: raaf-dsl-gem
        path: dsl/raaf-dsl-*.gem
        retention-days: 30

  # Final status job - summarizes all results
  test-summary:
    name: "📊 Test Summary"
    runs-on: ubuntu-latest
    needs: [build]
    if: always()
    
    steps:
    - uses: actions/checkout@v4

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports
        path: coverage-artifacts/
      continue-on-error: true

    - name: Process coverage data
      id: coverage
      run: |
        echo "Processing coverage reports..."
        
        if [ -f "coverage-artifacts/.last_run.json" ]; then
          # Extract coverage percentage from SimpleCov's last_run.json
          COVERAGE_PERCENT=$(cat "coverage-artifacts/.last_run.json" | jq -r '.result.line // 0' | cut -d. -f1)
          echo "coverage_percent=$COVERAGE_PERCENT" >> $GITHUB_OUTPUT
          
          # Count covered and total lines
          if [ -f "coverage-artifacts/.resultset.json" ]; then
            TOTAL_LINES=$(cat "coverage-artifacts/.resultset.json" | jq -r '
              [.. | objects | select(has("coverage")) | .coverage | to_entries[] | .value] 
              | map(select(. != null)) | length'
            )
            COVERED_LINES=$(cat "coverage-artifacts/.resultset.json" | jq -r '
              [.. | objects | select(has("coverage")) | .coverage | to_entries[] | .value] 
              | map(select(. != null and . > 0)) | length'
            )
            echo "total_lines=$TOTAL_LINES" >> $GITHUB_OUTPUT
            echo "covered_lines=$COVERED_LINES" >> $GITHUB_OUTPUT
          fi
          
          echo "coverage_available=true" >> $GITHUB_OUTPUT
        else
          echo "coverage_available=false" >> $GITHUB_OUTPUT
          echo "No coverage data found"
        fi
      continue-on-error: true

    - name: Check test results
      run: |
        echo "## DSL Test Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.build.result }}" == "success" ]]; then
          echo "✅ **All DSL Tests PASSED**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🎉 All tests (unit + examples) and build validation succeeded!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **DSL Tests FAILED**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ One or more tests failed. Check the test results above." >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📊 DSL Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.coverage.outputs.coverage_available }}" == "true" ]]; then
          COVERAGE_PERCENT="${{ steps.coverage.outputs.coverage_percent }}"
          TOTAL_LINES="${{ steps.coverage.outputs.total_lines }}"
          COVERED_LINES="${{ steps.coverage.outputs.covered_lines }}"
          
          # Coverage status emoji
          if (( COVERAGE_PERCENT >= 90 )); then
            COVERAGE_EMOJI="🟢"
          elif (( COVERAGE_PERCENT >= 80 )); then
            COVERAGE_EMOJI="🟡"
          else
            COVERAGE_EMOJI="🔴"
          fi
          
          echo "${COVERAGE_EMOJI} **Overall DSL Coverage: ${COVERAGE_PERCENT}%**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Lines Covered:** ${COVERED_LINES}" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Lines:** ${TOTAL_LINES}" >> $GITHUB_STEP_SUMMARY
          echo "- **Coverage Threshold:** 80% minimum" >> $GITHUB_STEP_SUMMARY
          
          # Coverage quality assessment
          if (( COVERAGE_PERCENT >= 80 )); then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ DSL coverage meets the minimum threshold requirement!" >> $GITHUB_STEP_SUMMARY
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "⚠️ DSL coverage is below the minimum threshold of 80%" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "⚠️ Coverage data not available" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 **DSL Workflow Structure:**" >> $GITHUB_STEP_SUMMARY
        echo "1. Lint & Style Check" >> $GITHUB_STEP_SUMMARY
        echo "2. Unit Tests (RSpec only)" >> $GITHUB_STEP_SUMMARY
        echo "3. Example Validation (separate job)" >> $GITHUB_STEP_SUMMARY
        echo "4. Build & Validate Gem" >> $GITHUB_STEP_SUMMARY
        echo "5. Coverage Summary" >> $GITHUB_STEP_SUMMARY

    - name: Fail if build failed
      if: needs.build.result != 'success'
      run: |
        echo "❌ DSL build failed. See summary above."
        exit 1
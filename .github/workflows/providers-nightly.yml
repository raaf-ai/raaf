name: üåô Providers Nightly - Extended Testing & Multi-Provider Validation

on:
  schedule:
    # Run every night at 2 AM UTC (different from core to spread load)
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      full_integration:
        description: 'Run full integration tests with real API calls'
        required: false
        default: 'false'
        type: boolean

env:
  RUBY_VERSION: '3.4.5'

jobs:
  # Extended compatibility matrix
  compatibility-matrix:
    name: "üîÑ Ruby ${{ matrix.ruby-version }} / ${{ matrix.os }} Compatibility"
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        ruby-version: ['3.1', '3.2', '3.3', '3.4.5']
        os: [ubuntu-latest, macos-latest, windows-latest]
        exclude:
          # Ruby 3.1 has issues on Windows with some gems
          - ruby-version: '3.1'
            os: windows-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby ${{ matrix.ruby-version }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true

    - name: Install dependencies (Providers gem)
      run: |
        cd providers
        bundle install

    - name: Run core tests
      run: |
        cd providers
        bundle exec rspec --tag ~integration --tag ~performance --tag ~cost --tag ~acceptance \
                         --format progress
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY_TEST }}
        TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY_TEST }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY_TEST }}
        LITELLM_API_KEY: ${{ secrets.LITELLM_API_KEY_TEST }}

    - name: Build and validate gem
      run: |
        cd providers
        gem build raaf-providers.gemspec
        gem install --local raaf-providers-*.gem
        ruby -r raaf-providers -e "puts 'Providers gem loaded on ${{ matrix.ruby-version }}/${{ matrix.os }}'"

  # Multi-provider integration tests
  multi-provider-tests:
    name: "üîó Multi-Provider Integration"
    runs-on: ubuntu-latest
    if: github.event.inputs.full_integration == 'true' || github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Providers gem)
      run: |
        cd providers
        bundle install

    - name: Test provider failover scenarios
      run: |
        cd providers
        bundle exec rspec --tag multi_provider \
                         --format progress \
                         --format RspecJunitFormatter \
                         --out test-results-multi-provider.xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_NIGHTLY }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_NIGHTLY }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_NIGHTLY }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY_NIGHTLY }}
        TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY_NIGHTLY }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY_NIGHTLY }}
        LITELLM_API_KEY: ${{ secrets.LITELLM_API_KEY_NIGHTLY }}

    - name: Upload multi-provider test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: multi-provider-test-results
        path: providers/test-results-multi-provider.xml
        retention-days: 14

  # Provider-specific validation
  provider-validation:
    name: "üß™ Provider Validation: ${{ matrix.provider }}"
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        provider: 
          - openai
          - anthropic
          - cohere
          - groq
          - together
          - litellm
          - responses
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Providers gem)
      run: |
        cd providers
        bundle install

    - name: Test ${{ matrix.provider }} provider
      run: |
        cd providers
        bundle exec rspec --tag ${{ matrix.provider }}_provider \
                         --format progress \
                         --format RspecJunitFormatter \
                         --out test-results-${{ matrix.provider }}.xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY_TEST }}
        TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY_TEST }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY_TEST }}
        LITELLM_API_KEY: ${{ secrets.LITELLM_API_KEY_TEST }}

    - name: Upload ${{ matrix.provider }} test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: ${{ matrix.provider }}-provider-test-results
        path: providers/test-results-${{ matrix.provider }}.xml
        retention-days: 14

  # Memory and performance benchmarks
  performance-benchmarks:
    name: "‚ö° Performance Benchmarks"
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Providers gem)
      run: |
        cd providers
        bundle install

    - name: Run performance benchmarks
      run: |
        cd providers
        bundle exec rspec --tag benchmark \
                         --format progress \
                         --format RspecJunitFormatter \
                         --out test-results-benchmarks.xml
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY_TEST }}
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY_TEST }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY_TEST }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY_TEST }}
        TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY_TEST }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY_TEST }}
        LITELLM_API_KEY: ${{ secrets.LITELLM_API_KEY_TEST }}

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: providers/test-results-benchmarks.xml
        retention-days: 30

    - name: Generate performance report
      run: |
        cd providers
        # Generate a simple performance report
        echo "## Provider Performance Benchmarks" > performance_report.md
        echo "" >> performance_report.md
        echo "Generated on: $(date)" >> performance_report.md
        echo "" >> performance_report.md
        
        # Add any specific performance metrics here
        echo "### Key Metrics" >> performance_report.md
        echo "- Memory usage tracked" >> performance_report.md
        echo "- Response time measured" >> performance_report.md
        echo "- Provider comparison completed" >> performance_report.md

    - name: Upload performance report
      uses: actions/upload-artifact@v4
      with:
        name: performance-report
        path: providers/performance_report.md
        retention-days: 30

  # Security and dependency audit
  security-audit:
    name: "üîí Security Audit"
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ env.RUBY_VERSION }}
        bundler-cache: true

    - name: Install dependencies (Providers gem)
      run: |
        cd providers
        bundle install

    - name: Run bundle audit
      run: |
        cd providers
        gem install bundler-audit
        bundle audit check --update
        bundle audit check --format json --output audit-report.json || true

    - name: Check for security vulnerabilities
      run: |
        cd providers
        # Additional security checks for providers
        echo "Running provider-specific security checks..."
        
        # Check for hardcoded API keys in examples
        if grep -r "sk-" examples/ 2>/dev/null | grep -v "your-api-key" | grep -v "test-key"; then
          echo "‚ö†Ô∏è Found potential hardcoded API keys in examples"
          exit 1
        fi
        
        # Check for sensitive data in provider files
        if grep -r "password\|secret\|private_key" lib/ --include="*.rb" | grep -v "API_KEY" | grep -v "password:" | grep -v "secret:"; then
          echo "‚ö†Ô∏è Found potential sensitive data in provider files"
          exit 1
        fi
        
        echo "‚úÖ Security checks passed"

    - name: Upload audit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-audit-report
        path: providers/audit-report.json
        retention-days: 30

  # Nightly summary
  nightly-summary:
    name: "üìä Nightly Summary"
    runs-on: ubuntu-latest
    needs: [compatibility-matrix, multi-provider-tests, provider-validation, performance-benchmarks, security-audit]
    if: always()
    
    steps:
    - name: Generate nightly summary
      run: |
        echo "## üåô Providers Nightly Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Date:** $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Compatibility results
        echo "### üîÑ Compatibility Matrix" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.compatibility-matrix.result }}" == "success" ]]; then
          echo "‚úÖ **Cross-platform compatibility**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Cross-platform compatibility**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Multi-provider results
        echo "### üîó Multi-Provider Integration" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.multi-provider-tests.result }}" == "success" ]]; then
          echo "‚úÖ **Multi-provider tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.multi-provider-tests.result }}" == "skipped" ]]; then
          echo "‚è≠Ô∏è **Multi-provider tests**: SKIPPED (no full integration)" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Multi-provider tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Provider validation results
        echo "### üß™ Provider Validation" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.provider-validation.result }}" == "success" ]]; then
          echo "‚úÖ **Individual provider tests**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Individual provider tests**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Performance results
        echo "### ‚ö° Performance Benchmarks" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.performance-benchmarks.result }}" == "success" ]]; then
          echo "‚úÖ **Performance benchmarks**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Performance benchmarks**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Security results
        echo "### üîí Security Audit" >> $GITHUB_STEP_SUMMARY
        if [[ "${{ needs.security-audit.result }}" == "success" ]]; then
          echo "‚úÖ **Security audit**: PASSED" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ùå **Security audit**: FAILED" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "üìã **Test Categories:**" >> $GITHUB_STEP_SUMMARY
        echo "- Cross-platform compatibility (Ruby 3.1-3.4, Ubuntu/macOS/Windows)" >> $GITHUB_STEP_SUMMARY
        echo "- Multi-provider integration and failover" >> $GITHUB_STEP_SUMMARY
        echo "- Individual provider validation" >> $GITHUB_STEP_SUMMARY
        echo "- Performance benchmarks and memory usage" >> $GITHUB_STEP_SUMMARY
        echo "- Security audit and vulnerability scanning" >> $GITHUB_STEP_SUMMARY

    - name: Create issue on failure
      if: needs.compatibility-matrix.result == 'failure' || needs.multi-provider-tests.result == 'failure' || needs.provider-validation.result == 'failure' || needs.performance-benchmarks.result == 'failure' || needs.security-audit.result == 'failure'
      uses: actions/github-script@v7
      with:
        script: |
          const title = `üåô Providers Nightly Tests Failed - ${new Date().toISOString().split('T')[0]}`;
          const body = `## Nightly Test Failure Report
          
          The nightly providers test suite has failed. Please investigate the following:
          
          ### Failed Jobs
          - **Compatibility Matrix**: ${{ needs.compatibility-matrix.result }}
          - **Multi-Provider Tests**: ${{ needs.multi-provider-tests.result }}
          - **Provider Validation**: ${{ needs.provider-validation.result }}
          - **Performance Benchmarks**: ${{ needs.performance-benchmarks.result }}
          - **Security Audit**: ${{ needs.security-audit.result }}
          
          ### Action Required
          1. Check the [workflow run](${context.payload.repository.html_url}/actions/runs/${context.runId}) for detailed logs
          2. Review any failing tests or compatibility issues
          3. Address security vulnerabilities if found
          4. Update provider implementations if needed
          
          ### Workflow Information
          - **Trigger**: ${context.eventName}
          - **Branch**: ${context.ref}
          - **Commit**: ${context.sha}
          - **Date**: ${new Date().toISOString()}
          
          /cc @team-leads`;
          
          // Check if similar issue already exists
          const issues = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            labels: ['nightly-failure', 'providers'],
            state: 'open'
          });
          
          if (issues.data.length === 0) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['nightly-failure', 'providers', 'investigation-needed']
            });
          } else {
            console.log('Similar nightly failure issue already exists, skipping creation');
          }
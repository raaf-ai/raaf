name: 'Setup RAAF Environment'
description: 'Sets up Ruby environment with local RAAF gems for testing'
inputs:
  target-gem:
    description: 'The gem being tested (e.g., core, dsl, providers)'
    required: true
  install-dependencies:
    description: 'Whether to install bundle dependencies'
    required: false
    default: 'true'
runs:
  using: 'composite'
  steps:
    - name: Create Gemfile.local for path overrides
      shell: bash
      run: |
        # Create a Gemfile.local that includes all RAAF gems as path dependencies
        # This will be evaluated by the target gem's Gemfile if it exists
        
        # Get the repository root directory
        REPO_ROOT=$(pwd)
        
        cat > Gemfile.local << EOF
        # Local path overrides for RAAF gems
        # This file is automatically generated by the CI setup
        
        # Core gems
        gem "raaf-core", path: "${REPO_ROOT}/core" if Dir.exist?("${REPO_ROOT}/core")
        
        # Feature gems
        gem "raaf-providers", path: "${REPO_ROOT}/providers" if Dir.exist?("${REPO_ROOT}/providers")
        gem "raaf-tools", path: "${REPO_ROOT}/tools" if Dir.exist?("${REPO_ROOT}/tools")
        gem "raaf-guardrails", path: "${REPO_ROOT}/guardrails" if Dir.exist?("${REPO_ROOT}/guardrails")
        gem "raaf-tracing", path: "${REPO_ROOT}/tracing" if Dir.exist?("${REPO_ROOT}/tracing")
        gem "raaf-streaming", path: "${REPO_ROOT}/streaming" if Dir.exist?("${REPO_ROOT}/streaming")
        gem "raaf-memory", path: "${REPO_ROOT}/memory" if Dir.exist?("${REPO_ROOT}/memory")
        gem "raaf-extensions", path: "${REPO_ROOT}/extensions" if Dir.exist?("${REPO_ROOT}/extensions")
        
        # Framework gems
        gem "raaf-dsl", path: "${REPO_ROOT}/dsl" if Dir.exist?("${REPO_ROOT}/dsl")
        gem "raaf-rails", path: "${REPO_ROOT}/rails" if Dir.exist?("${REPO_ROOT}/rails")
        
        # Support gems
        gem "raaf-testing", path: "${REPO_ROOT}/testing" if Dir.exist?("${REPO_ROOT}/testing")
        gem "raaf-debug", path: "${REPO_ROOT}/debug" if Dir.exist?("${REPO_ROOT}/debug")
        gem "raaf-compliance", path: "${REPO_ROOT}/compliance" if Dir.exist?("${REPO_ROOT}/compliance")
        gem "raaf-misc", path: "${REPO_ROOT}/misc" if Dir.exist?("${REPO_ROOT}/misc")
        
        # Main meta-gem
        gem "raaf", path: "${REPO_ROOT}/raaf" if Dir.exist?("${REPO_ROOT}/raaf")
        EOF
        
        echo "Created Gemfile.local with local path overrides"
    
    - name: Setup Gemfile for target gem
      if: inputs.install-dependencies == 'true'
      shell: bash
      run: |
        cd "${{ inputs.target-gem }}"
        
        # Create a temporary Gemfile that adds any missing RAAF path dependencies
        cp Gemfile Gemfile.original
        
        # Add local path overrides for all RAAF gems at the beginning
        {
          echo "# CI: Local path overrides for RAAF gems"
          echo "# These override any gemspec dependencies"
          echo ""
          
          # Add path dependencies for RAAF gems that might not be in the Gemfile
          for gem_dir in ../*/; do
            gemspec_file=$(find "${gem_dir}" -maxdepth 1 -name "raaf-*.gemspec" 2>/dev/null | head -1)
            if [ -n "${gemspec_file}" ]; then
              gem_name=$(basename "${gemspec_file}" .gemspec)
              # Only add if not already in Gemfile
              if ! grep -q "gem ['\"]${gem_name}['\"]" Gemfile.original; then
                echo "gem \"${gem_name}\", path: \"${gem_dir%/}\""
              fi
            fi
          done
          
          echo ""
          cat Gemfile.original
        } > Gemfile
        
        echo "Modified Gemfile to include all RAAF gems as local paths"
    
    - name: Install dependencies with Bundler
      if: inputs.install-dependencies == 'true'
      shell: bash
      run: |
        cd "${{ inputs.target-gem }}"
        
        # Remove Gemfile.lock to ensure fresh resolution with local paths
        rm -f Gemfile.lock
        
        # Install dependencies
        echo "Installing dependencies for ${{ inputs.target-gem }} with local RAAF gems..."
        bundle install --retry 3
        
        # Show which RAAF gems are using local paths
        echo ""
        echo "RAAF gems using local paths:"
        bundle list | grep "raaf-" | grep "path:" || echo "No local RAAF gems found"
    
    - name: Setup Ruby load paths
      shell: bash
      run: |
        # Build RUBYOPT environment variable with all necessary load paths
        RUBY_PATHS=""
        
        # Determine which gems to add to load path based on target
        case "${{ inputs.target-gem }}" in
          core)
            # Core only needs its own path
            GEMS_TO_ADD="core"
            ;;
          providers)
            # Providers needs core and base gems
            GEMS_TO_ADD="core tracing memory guardrails tools providers"
            ;;
          dsl)
            # DSL needs everything
            GEMS_TO_ADD="core tracing memory guardrails tools providers dsl"
            ;;
          rails)
            # Rails needs everything including DSL
            GEMS_TO_ADD="core tracing memory guardrails tools providers dsl rails"
            ;;
          *)
            # For other gems, add core and the target
            GEMS_TO_ADD="core ${{ inputs.target-gem }}"
            ;;
        esac
        
        # Add each gem's lib directory to the path
        for gem in $GEMS_TO_ADD; do
          if [ -d "$gem/lib" ]; then
            RUBY_PATHS="$RUBY_PATHS -I$(pwd)/$gem/lib"
          fi
        done
        
        # Export for use in subsequent steps
        echo "RUBYOPT=$RUBY_PATHS" >> $GITHUB_ENV
        echo "Set up Ruby load paths: $RUBY_PATHS"
    
    - name: Restore original Gemfile
      if: always() && inputs.install-dependencies == 'true'
      shell: bash
      run: |
        cd "${{ inputs.target-gem }}"
        
        # Restore original Gemfile if we modified it
        if [ -f "Gemfile.original" ]; then
          mv Gemfile.original Gemfile
          echo "Restored original Gemfile"
        fi
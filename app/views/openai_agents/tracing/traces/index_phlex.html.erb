<%
  layout = OpenAIAgents::Tracing::BaseLayout.new(title: "Traces")
  traces_list = OpenAIAgents::Tracing::TracesList.new(
    traces: @traces,
    stats: @stats
  )
%>

<%= render layout do %>
  <%= render traces_list %>
<% end %>

<script>
  // Live update functionality for traces
  class TracesLiveUpdate {
    constructor() {
      this.autoRefreshEnabled = true;
      this.refreshInterval = 5000; // 5 seconds
      this.intervalId = null;
      this.initialize();
    }

    initialize() {
      // Setup event handlers
      this.setupEventHandlers();
      
      // Start auto-refresh if enabled
      if (this.autoRefreshEnabled) {
        this.startAutoRefresh();
      }
      
      // Initial connection status
      this.updateConnectionStatus('polling');
    }

    setupEventHandlers() {
      // Refresh button
      const refreshBtn = document.getElementById('refresh-dashboard');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', () => {
          this.fetchUpdates();
        });
      }

      // Auto-refresh toggle
      const autoRefreshToggle = document.getElementById('auto-refresh-toggle');
      if (autoRefreshToggle) {
        autoRefreshToggle.addEventListener('change', (e) => {
          this.autoRefreshEnabled = e.target.checked;
          if (this.autoRefreshEnabled) {
            this.startAutoRefresh();
          } else {
            this.stopAutoRefresh();
          }
        });
      }
    }

    startAutoRefresh() {
      this.stopAutoRefresh();
      this.intervalId = setInterval(() => {
        this.fetchUpdates();
      }, this.refreshInterval);
    }

    stopAutoRefresh() {
      if (this.intervalId) {
        clearInterval(this.intervalId);
        this.intervalId = null;
      }
    }

    async fetchUpdates() {
      try {
        console.log('Fetching updates...');
        const response = await fetch(window.location.href, {
          headers: {
            'Accept': 'text/html',
            'X-Requested-With': 'XMLHttpRequest'
          }
        });

        console.log('Response status:', response.status);
        
        if (response.ok) {
          const html = await response.text();
          console.log('Received HTML length:', html.length);
          
          this.updateTracesList(html);
          this.updateLastUpdated();
          // Show brief success notification if there were changes
          const newTraceCount = document.querySelectorAll('[data-trace-id]').length;
          if (this.lastTraceCount !== undefined && this.lastTraceCount !== newTraceCount) {
            this.updateConnectionStatus('updated');
          }
          this.lastTraceCount = newTraceCount;
        } else {
          console.error('Response not OK:', response.status, response.statusText);
        }
      } catch (error) {
        console.error('Failed to fetch updates:', error);
        this.updateConnectionStatus('error');
      }
    }

    updateTracesList(html) {
      const container = document.getElementById('traces-table-container');
      if (!container) return;

      // Get current trace IDs before update
      const currentTraces = new Set();
      document.querySelectorAll('[data-trace-id]').forEach(tr => {
        currentTraces.add(tr.dataset.traceId);
      });

      // Update the entire table container
      container.innerHTML = html;

      // Highlight new traces
      document.querySelectorAll('[data-trace-id]').forEach(tr => {
        if (!currentTraces.has(tr.dataset.traceId)) {
          tr.classList.add('bg-green-50');
          setTimeout(() => {
            tr.classList.remove('bg-green-50');
          }, 2000);
        }
      });
    }

    updateLastUpdated() {
      const lastUpdated = document.getElementById('last-updated');
      if (lastUpdated) {
        lastUpdated.textContent = new Date().toLocaleString();
      }
    }

    updateConnectionStatus(status) {
      const statusElement = document.getElementById('connection-status');
      if (statusElement) {
        if (status === 'polling') {
          statusElement.classList.remove('hidden');
          statusElement.className = 'bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4';
          statusElement.querySelector('.status-text').textContent = 'Live updates active (refreshing every 5 seconds)';
          // Hide after initial display
          setTimeout(() => {
            statusElement.classList.add('hidden');
          }, 3000);
        } else if (status === 'error') {
          statusElement.classList.remove('hidden');
          statusElement.className = 'bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-4';
          statusElement.querySelector('.status-text').textContent = 'Connection error - retrying...';
          setTimeout(() => {
            statusElement.classList.add('hidden');
          }, 3000);
        } else if (status === 'updated') {
          // Show brief update notification
          statusElement.classList.remove('hidden');
          statusElement.className = 'bg-green-50 border border-green-200 rounded-lg p-4 mb-4';
          statusElement.querySelector('.status-text').textContent = 'Updated!';
          setTimeout(() => {
            statusElement.classList.add('hidden');
          }, 1000);
        }
      }
    }

    destroy() {
      this.stopAutoRefresh();
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Initialize live updates
    window.tracesLiveUpdate = new TracesLiveUpdate();
  });
</script>
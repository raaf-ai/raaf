# Minimal RuboCop configuration for raaf-rails
# Inherit from TODO file for gradual compliance
inherit_from: .rubocop_todo.yml

plugins:
  - rubocop-rails
  - rubocop-rspec
  - rubocop-rake

AllCops:
  TargetRubyVersion: 3.0
  TargetRailsVersion: 7.0
  NewCops: enable
  SuggestExtensions: false
  Exclude:
    - 'vendor/**/*'
    - 'tmp/**/*'
    - 'bin/**/*'
    - 'pkg/**/*'
    - 'db/schema.rb'
    - 'node_modules/**/*'
    - 'public/**/*'
    - 'log/**/*'
    - 'storage/**/*'
    - 'spec/spec_helper.rb'
    - 'spec/minimal_spec_helper.rb'

# Layout rules
Layout/LineLength:
  Max: 120
  Exclude:
    - 'examples/**/*'  # Examples can have longer lines for readability
    - 'raaf-rails.gemspec'  # Gemspec descriptions can be long
    - 'lib/**/*'  # Allow longer lines in library code for clarity
    - 'spec/**/*'  # Allow longer lines in test files for clarity
    - 'config/**/*'  # Rails config files can have long lines

# Metrics rules - relaxed for Rails complexity
Metrics/AbcSize:
  Max: 100  # Rails controllers and models can be complex

Metrics/MethodLength:
  Max: 80  # Rails methods often handle multiple concerns
  Exclude:
    - 'examples/**/*'
    - 'db/migrate/*'  # Migrations can be long

Metrics/ClassLength:
  Max: 500  # Rails classes can be large
  Exclude:
    - 'app/controllers/**/*'  # Controllers might be large

Metrics/ModuleLength:
  Max: 700  # Rails modules contain many helper methods

Metrics/BlockLength:
  Max: 250
  Exclude:
    - 'spec/**/*'
    - 'examples/**/*'
    - 'config/routes.rb'  # Routes can have long blocks
    - 'db/schema.rb'
    - 'db/migrate/*'

Metrics/CyclomaticComplexity:
  Max: 25  # Complex business logic in Rails apps

Metrics/PerceivedComplexity:
  Max: 25

Metrics/ParameterLists:
  Max: 15  # API methods need many optional parameters

Metrics/BlockNesting:
  Max: 4

# Style rules
Style/Documentation:
  Enabled: false

Style/StringLiterals:
  EnforcedStyle: double_quotes

Style/FrozenStringLiteralComment:
  Enabled: true

Style/HashLikeCase:
  Enabled: false

Style/ClassVars:
  Enabled: false  # Rails uses class variables in some patterns

Style/StringConcatenation:
  Enabled: false

Style/EmptyElse:
  Enabled: false

Style/MultilineBlockChain:
  Enabled: false

# Rails-specific rules
Rails:
  Enabled: true
  Exclude:
    - 'spec/**/*'  # Specs mock Rails, don't use real Rails

Rails/Delegate:
  Exclude:
    - 'spec/**/*'  # Can't use delegate in mock Rails environment

Rails/ApplicationRecord:
  Enabled: true

Rails/ApplicationController:
  Enabled: true

Rails/RakeEnvironment:
  Enabled: false  # Not always needed in all rake tasks

Rails/FilePath:
  EnforcedStyle: slashes

Rails/SkipsModelValidations:
  Enabled: false  # Sometimes needed for performance

Rails/DynamicFindBy:
  Enabled: false  # find_by_* methods are often clearer

Rails/HasAndBelongsToMany:
  Enabled: false  # Sometimes appropriate

Rails/OutputSafety:
  Enabled: true  # Important for security

Rails/UnknownEnv:
  Environments:
    - production
    - development
    - test
    - staging

# Gemspec rules
Gemspec/DevelopmentDependencies:
  Enabled: false

# Naming rules
Naming/FileName:
  Enabled: false

Naming/PredicateMethod:
  Enabled: false

Naming/AccessorMethodName:
  Enabled: false

Naming/PredicatePrefix:
  Enabled: false

# Security rules
Security/Eval:
  Exclude:
    - 'examples/**/*'

# Lint rules
Lint/UnusedMethodArgument:
  Enabled: false

Lint/MissingSuper:
  Enabled: false

Lint/DuplicateBranch:
  Enabled: false

# Basic RSpec rules only
RSpec/ExampleLength:
  Enabled: false  # Allow long examples for comprehensive testing

RSpec/MultipleExpectations:
  Enabled: false  # Allow multiple expectations in comprehensive tests

RSpec/DescribeClass:
  Enabled: false

RSpec/SpecFilePathSuffix:
  Enabled: false  # Rails specs don't follow deep directory structure

RSpec/SpecFilePathFormat:
  Enabled: false  # Rails specs use flat structure

# Additional RSpec configuration
RSpec/VerifiedDoubles:
  Enabled: false  # Allow normal doubles in tests

RSpec/MessageSpies:
  Enabled: false  # Allow receive expectations

RSpec/InstanceVariable:
  Enabled: false  # Allow instance variables in tests

RSpec/LeakyConstantDeclaration:
  Enabled: false  # Allow class declarations in tests

RSpec/ContextWording:
  Enabled: false  # Allow flexible context descriptions

RSpec/BeforeAfterAll:
  Enabled: false  # Allow before(:all) when needed

RSpec/IndexedLet:
  Enabled: false  # Allow indexed let statements

RSpec/IteratedExpectation:
  Enabled: false  # Allow iteration in expectations

RSpec/NamedSubject:
  Enabled: false  # Allow unnamed subjects

RSpec/RepeatedExample:
  Enabled: false  # Allow repeated examples when needed

RSpec/MultipleDescribes:
  Enabled: false  # Allow multiple describes in one file

RSpec/ExpectActual:
  Enabled: false  # Allow flexible expect usage

RSpec/IdenticalEqualityAssertion:
  Enabled: false  # Allow identical equality assertions when testing constants

# Modern RSpec cops configuration
RSpec/NestedGroups:
  Enabled: false  # Allow deep nesting for comprehensive test organization

RSpec/MultipleMemoizedHelpers:
  Enabled: false  # Allow many helpers for complex test setups

# Disable problematic/deprecated cops
RSpec/PredicateMatcher:
  Enabled: false

# Rails-specific cops
Rails/HttpStatus:
  Enabled: false  # Numeric status codes are often clearer

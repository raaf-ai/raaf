<div id="spans-dashboard">
  <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Spans</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
      <div class="btn-group me-2">
        <button id="refresh-spans" class="btn btn-sm btn-outline-secondary" title="Refresh">
          <i class="bi bi-arrow-clockwise"></i>
        </button>
        <%= link_to tracing_spans_path(kind: 'llm'), class: "btn btn-outline-info" do %>
          <i class="bi bi-robot me-1"></i>AI Calls Only
        <% end %>
        <%= link_to tracing_traces_path, class: "btn btn-outline-secondary" do %>
          <i class="bi bi-diagram-3 me-1"></i>View Traces
        <% end %>
      </div>
      <div class="form-check form-switch ms-3">
        <input class="form-check-input" type="checkbox" id="auto-refresh-spans" checked>
        <label class="form-check-label" for="auto-refresh-spans">
          Auto-refresh
        </label>
      </div>
    </div>
  </div>
  
  <!-- Connection Status -->
  <div id="connection-status-spans" class="alert alert-info d-none" role="alert">
    <i class="bi bi-info-circle me-2"></i>
    <span class="status-text">Connecting...</span>
  </div>

<!-- Filters -->
<div class="card mb-4">
  <div class="card-body">
    <%= form_with(url: tracing_spans_path, method: :get, local: true, class: "row g-3") do |f| %>
      <div class="col-md-3">
        <%= f.label :trace_id, "Trace ID", class: "form-label" %>
        <%= f.text_field :trace_id, value: params[:trace_id], class: "form-control", placeholder: "trace_..." %>
      </div>
      
      <div class="col-md-3">
        <%= f.label :kind, "Kind", class: "form-label" %>
        <%= f.select :kind, 
            options_for_select([
              ["All", ""],
              ["Agent", "agent"],
              ["LLM", "llm"],
              ["Tool", "tool"],
              ["Handoff", "handoff"]
            ], params[:kind]),
            {}, 
            class: "form-select" %>
      </div>
      
      <div class="col-md-3">
        <%= f.label :status, "Status", class: "form-label" %>
        <%= f.select :status, 
            options_for_select([
              ["All", ""],
              ["OK", "ok"],
              ["Error", "error"],
              ["Running", "running"]
            ], params[:status]),
            {}, 
            class: "form-select" %>
      </div>
      
      <div class="col-md-3">
        <label class="form-label">&nbsp;</label>
        <div>
          <%= f.submit "Filter", class: "btn btn-primary" %>
          <%= link_to "Reset", tracing_spans_path, class: "btn btn-secondary" %>
        </div>
      </div>
    <% end %>
  </div>
</div>

<!-- Results -->
<% if @spans.any? %>
  <div class="table-responsive">
    <table class="table table-hover">
      <thead>
        <tr>
          <th>Span ID</th>
          <th>Name</th>
          <th>Kind</th>
          <th>Status</th>
          <th>Duration</th>
          <th>Start Time</th>
          <th>Trace</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody id="spans-list">
        <% @spans.each do |span| %>
          <tr>
            <td>
              <code class="text-truncate d-inline-block" style="max-width: 200px;">
                <%= span.span_id %>
              </code>
            </td>
            <td>
              <%= link_to span.name, tracing_span_path(span.span_id), class: "text-decoration-none" %>
            </td>
            <td><%= kind_badge(span.kind) %></td>
            <td><%= status_badge(span.status) %></td>
            <td><%= format_duration(span.duration_ms) %></td>
            <td>
              <% if span.start_time %>
                <%= span.start_time.strftime("%Y-%m-%d %H:%M:%S") %>
              <% else %>
                -
              <% end %>
            </td>
            <td>
              <% if span.trace %>
                <%= link_to span.trace_id, tracing_trace_path(span.trace_id), 
                    class: "text-decoration-none font-monospace", 
                    style: "font-size: 0.875rem;" %>
              <% else %>
                <span class="text-muted">-</span>
              <% end %>
            </td>
            <td>
              <div class="btn-group" role="group">
                <%= link_to tracing_span_path(span.span_id), 
                    class: "btn btn-sm btn-outline-primary" do %>
                  <i class="bi bi-eye"></i>
                <% end %>
              </div>
            </td>
          </tr>
        <% end %>
      </tbody>
    </table>
  </div>

  <!-- Pagination -->
  <% if @total_pages && @total_pages > 1 %>
    <nav aria-label="Page navigation">
      <ul class="pagination justify-content-center">
        <li class="page-item <%= 'disabled' if @page <= 1 %>">
          <%= link_to tracing_spans_path(params.permit(:trace_id, :kind, :status).merge(page: @page - 1)), 
              class: "page-link" do %>
            Previous
          <% end %>
        </li>
        
        <% (1..[@total_pages, 10].min).each do |page| %>
          <li class="page-item <%= 'active' if page == @page %>">
            <%= link_to page, 
                tracing_spans_path(params.permit(:trace_id, :kind, :status).merge(page: page)), 
                class: "page-link" %>
          </li>
        <% end %>
        
        <li class="page-item <%= 'disabled' if @page >= @total_pages %>">
          <%= link_to tracing_spans_path(params.permit(:trace_id, :kind, :status).merge(page: @page + 1)), 
              class: "page-link" do %>
            Next
          <% end %>
        </li>
      </ul>
    </nav>
  <% end %>
<% else %>
  <div class="alert alert-info" role="alert">
    <i class="bi bi-info-circle me-2"></i>
    No spans found. Try adjusting your filters or check back later.
  </div>
<% end %>

<!-- Last Updated -->
<div class="text-end text-muted small mt-3">
  Last updated: <span id="last-updated-spans"><%= Time.current.strftime("%Y-%m-%d %H:%M:%S") %></span>
</div>

</div><!-- End of spans-dashboard -->

<% content_for :javascript do %>
<script>
  // Live update functionality for spans
  class SpansLiveUpdate {
    constructor() {
      this.autoRefreshEnabled = true;
      this.refreshInterval = 5000; // 5 seconds
      this.intervalId = null;
      this.initialize();
    }

    initialize() {
      // Setup event handlers
      this.setupEventHandlers();
      
      // Start auto-refresh if enabled
      if (this.autoRefreshEnabled) {
        this.startAutoRefresh();
      }
      
      // Initial connection status
      this.updateConnectionStatus('polling');
    }

    setupEventHandlers() {
      // Refresh button
      const refreshBtn = document.getElementById('refresh-spans');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', () => {
          this.fetchUpdates();
        });
      }

      // Auto-refresh toggle
      const autoRefreshToggle = document.getElementById('auto-refresh-spans');
      if (autoRefreshToggle) {
        autoRefreshToggle.addEventListener('change', (e) => {
          this.autoRefreshEnabled = e.target.checked;
          if (this.autoRefreshEnabled) {
            this.startAutoRefresh();
          } else {
            this.stopAutoRefresh();
          }
        });
      }
    }

    startAutoRefresh() {
      this.stopAutoRefresh();
      this.intervalId = setInterval(() => {
        this.fetchUpdates();
      }, this.refreshInterval);
    }

    stopAutoRefresh() {
      if (this.intervalId) {
        clearInterval(this.intervalId);
        this.intervalId = null;
      }
    }

    async fetchUpdates() {
      try {
        const response = await fetch(window.location.href, {
          headers: {
            'Accept': 'text/javascript',
            'X-Requested-With': 'XMLHttpRequest'
          }
        });

        if (response.ok) {
          const html = await response.text();
          this.updateSpansList(html);
          this.updateLastUpdated();
        }
      } catch (error) {
        console.error('Failed to fetch updates:', error);
        this.updateConnectionStatus('error');
      }
    }

    updateSpansList(html) {
      // Parse the HTML response
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, 'text/html');
      
      // Extract the spans tbody content
      const newTbody = doc.querySelector('#spans-list');
      const currentTbody = document.querySelector('#spans-list');
      
      if (newTbody && currentTbody) {
        // Get current span IDs
        const currentSpans = new Set();
        currentTbody.querySelectorAll('code').forEach(code => {
          currentSpans.add(code.textContent.trim());
        });
        
        // Update tbody content
        currentTbody.innerHTML = newTbody.innerHTML;
        
        // Highlight new spans
        currentTbody.querySelectorAll('tr').forEach(tr => {
          const spanId = tr.querySelector('code')?.textContent.trim();
          if (spanId && !currentSpans.has(spanId)) {
            tr.classList.add('table-success');
            setTimeout(() => {
              tr.classList.remove('table-success');
            }, 2000);
          }
        });
      }
    }

    updateLastUpdated() {
      const lastUpdated = document.getElementById('last-updated-spans');
      if (lastUpdated) {
        lastUpdated.textContent = new Date().toLocaleString();
      }
    }

    updateConnectionStatus(status) {
      const statusElement = document.getElementById('connection-status-spans');
      if (statusElement) {
        statusElement.classList.remove('d-none');
        
        if (status === 'polling') {
          statusElement.className = 'alert alert-info';
          statusElement.querySelector('.status-text').textContent = 'Live updates active (polling mode)';
        } else if (status === 'error') {
          statusElement.className = 'alert alert-warning';
          statusElement.querySelector('.status-text').textContent = 'Connection error - retrying...';
          setTimeout(() => {
            statusElement.classList.add('d-none');
          }, 3000);
        }
      }
    }

    destroy() {
      this.stopAutoRefresh();
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Initialize live updates
    window.spansLiveUpdate = new SpansLiveUpdate();
  });

  // Cleanup on page unload
  window.addEventListener('beforeunload', function() {
    if (window.spansLiveUpdate) {
      window.spansLiveUpdate.destroy();
    }
  });
</script>
<% end %>
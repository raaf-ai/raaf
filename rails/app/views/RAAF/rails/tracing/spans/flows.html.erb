<% content_for :title, "Agent & Tool Flow Visualization" %>
<% content_for :breadcrumb do %>
  <li class="breadcrumb-item"><%= link_to "Spans", spans_path %></li>
  <li class="breadcrumb-item active" aria-current="page">Flow Visualization</li>
<% end %>

<div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
  <div>
    <h1 class="h2">
      <i class="bi bi-diagram-3 me-2"></i>Agent & Tool Flow
    </h1>
    <p class="text-muted">Visualize interactions between agents and tools</p>
  </div>
  <div class="btn-toolbar mb-2 mb-md-0">
    <div class="btn-group me-2">
      <button class="btn btn-outline-secondary" onclick="exportDiagram()">
        <i class="bi bi-download me-1"></i>Export
      </button>
      <button class="btn btn-outline-secondary" onclick="resetZoom()">
        <i class="bi bi-arrows-fullscreen me-1"></i>Reset View
      </button>
    </div>
  </div>
</div>

<!-- Filters -->
<div class="card mb-3">
  <div class="card-body">
    <%= form_with url: flows_path, method: :get, local: true, class: "row g-3" do |f| %>
      <div class="col-md-2">
        <%= f.datetime_local_field :start_time, 
            class: "form-control", 
            value: @start_time.strftime("%Y-%m-%dT%H:%M") %>
        <label class="form-label">Start Time</label>
      </div>
      
      <div class="col-md-2">
        <%= f.datetime_local_field :end_time, 
            class: "form-control", 
            value: @end_time.strftime("%Y-%m-%dT%H:%M") %>
        <label class="form-label">End Time</label>
      </div>
      
      <div class="col-md-2">
        <%= f.select :agent_name, 
            options_for_select([["All Agents", ""]] + @agents.map { |a| [a, a] }, params[:agent_name]),
            {}, 
            class: "form-select" %>
        <label class="form-label">Filter by Agent</label>
      </div>
      
      <div class="col-md-3">
        <%= f.select :trace_id, 
            options_for_select([["All Traces", ""]] + @traces.map { |id, name| ["#{name} (#{id[0..7]}...)", id] }, params[:trace_id]),
            {}, 
            class: "form-select" %>
        <label class="form-label">Filter by Trace</label>
      </div>
      
      <div class="col-md-3 d-flex align-items-end">
        <%= f.submit "Apply Filters", class: "btn btn-primary me-2" %>
        <%= link_to "Clear", flows_path, class: "btn btn-outline-secondary" %>
      </div>
    <% end %>
  </div>
</div>

<!-- Statistics -->
<div class="row mb-4">
  <div class="col-md-3">
    <div class="card">
      <div class="card-body text-center">
        <div class="h4 mb-1"><%= @flow_data[:stats][:total_agents] %></div>
        <div class="text-muted">Active Agents</div>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card">
      <div class="card-body text-center">
        <div class="h4 mb-1"><%= @flow_data[:stats][:total_tools] %></div>
        <div class="text-muted">Tools Used</div>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card">
      <div class="card-body text-center">
        <div class="h4 mb-1"><%= @flow_data[:stats][:total_calls] %></div>
        <div class="text-muted">Total Interactions</div>
      </div>
    </div>
  </div>
  <div class="col-md-3">
    <div class="card">
      <div class="card-body text-center">
        <% total_duration = @flow_data[:nodes].sum { |n| n[:total_duration] || 0 } %>
        <div class="h4 mb-1"><%= format_duration(total_duration) %></div>
        <div class="text-muted">Total Duration</div>
      </div>
    </div>
  </div>
</div>

<!-- Flow Diagram -->
<div class="card">
  <div class="card-header">
    <h5 class="card-title mb-0">Flow Diagram</h5>
    <small class="text-muted">Click on nodes for details • Scroll to zoom • Drag to pan</small>
  </div>
  <div class="card-body">
    <div id="flow-diagram" class="mermaid-container">
      <pre class="mermaid">
flowchart LR
<% # Generate Mermaid diagram %>
<% @flow_data[:nodes].each do |node| %>
  <% if node[:type] == "agent" %>
    <%= node[:id] %>["<i class='bi bi-person-badge'></i> <%= node[:name] %><br/><small><%= node[:count] %> calls</small>"]
  <% else %>
    <% if node[:kind] == "custom" %>
      <%= node[:id] %>[("<i class='bi bi-gear'></i> <%= node[:name] %><br/><small><%= node[:count] %> calls</small>")]
    <% else %>
      <%= node[:id] %>[("<i class='bi bi-tools'></i> <%= node[:name] %><br/><small><%= node[:count] %> calls</small>")]
    <% end %>
  <% end %>
<% end %>

<% # Generate edges %>
<% @flow_data[:edges].each do |edge| %>
  <% label = "#{edge[:count]} call#{edge[:count] > 1 ? 's' : ''}" %>
  <% if edge[:avg_duration] %>
    <% label += " (#{format_duration(edge[:avg_duration])})" %>
  <% end %>
  <%= edge[:source] %> -->|"<%= label %>"| <%= edge[:target] %>
<% end %>

<% # Apply styling %>
classDef agent fill:#e3f2fd,stroke:#1976d2,stroke-width:2px,color:#1976d2
classDef tool fill:#fff3e0,stroke:#f57c00,stroke-width:2px,color:#f57c00
classDef custom fill:#f3e5f5,stroke:#7b1fa2,stroke-width:2px,color:#7b1fa2

<% @flow_data[:nodes].each do |node| %>
  <% if node[:type] == "agent" %>
    class <%= node[:id] %> agent
  <% elsif node[:kind] == "custom" %>
    class <%= node[:id] %> custom
  <% else %>
    class <%= node[:id] %> tool
  <% end %>
<% end %>
      </pre>
    </div>
  </div>
</div>

<!-- Node Details Modal -->
<div class="modal fade" id="nodeDetailsModal" tabindex="-1">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="nodeDetailsTitle">Node Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body" id="nodeDetailsBody">
        <!-- Details will be populated by JavaScript -->
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<% content_for :javascript do %>
<script src="https://cdn.jsdelivr.net/npm/mermaid/dist/mermaid.min.js"></script>
<script>
  // Initialize Mermaid
  mermaid.initialize({ 
    startOnLoad: true,
    theme: 'default',
    flowchart: {
      useMaxWidth: true,
      htmlLabels: true,
      curve: 'basis'
    }
  });

  // Flow data for JavaScript
  const flowData = <%= @flow_data.to_json.html_safe %>;

  // Add click handlers to nodes after Mermaid renders
  document.addEventListener('DOMContentLoaded', function() {
    setTimeout(() => {
      // Add click handlers to all nodes
      flowData.nodes.forEach(node => {
        const element = document.querySelector(`#${node.id}`);
        if (element) {
          element.style.cursor = 'pointer';
          element.addEventListener('click', () => showNodeDetails(node));
        }
      });
    }, 500);
  });

  function showNodeDetails(node) {
    const modal = new bootstrap.Modal(document.getElementById('nodeDetailsModal'));
    const title = document.getElementById('nodeDetailsTitle');
    const body = document.getElementById('nodeDetailsBody');
    
    title.textContent = `${node.type === 'agent' ? 'Agent' : 'Tool'}: ${node.name}`;
    
    let detailsHtml = `
      <dl class="row">
        <dt class="col-sm-4">Type</dt>
        <dd class="col-sm-8">${node.type}${node.kind === 'custom' ? ' (custom)' : ''}</dd>
        
        <dt class="col-sm-4">Total Calls</dt>
        <dd class="col-sm-8">${node.count}</dd>
        
        <dt class="col-sm-4">Total Duration</dt>
        <dd class="col-sm-8">${formatDuration(node.total_duration)}</dd>
        
        <dt class="col-sm-4">Avg Duration</dt>
        <dd class="col-sm-8">${formatDuration(node.avg_duration)}</dd>
        
        <dt class="col-sm-4">Success Rate</dt>
        <dd class="col-sm-8">
          <span class="${node.success_rate >= 95 ? 'text-success' : node.success_rate >= 80 ? 'text-warning' : 'text-danger'}">
            ${node.success_rate}%
          </span>
        </dd>
        
        <dt class="col-sm-4">Errors</dt>
        <dd class="col-sm-8">${node.error_count}</dd>
      </dl>
    `;
    
    // Add connections info
    const incoming = flowData.edges.filter(e => e.target === node.id);
    const outgoing = flowData.edges.filter(e => e.source === node.id);
    
    if (incoming.length > 0) {
      detailsHtml += '<h6 class="mt-3">Incoming Connections</h6><ul>';
      incoming.forEach(edge => {
        const sourceNode = flowData.nodes.find(n => n.id === edge.source);
        detailsHtml += `<li>${sourceNode.name}: ${edge.count} calls</li>`;
      });
      detailsHtml += '</ul>';
    }
    
    if (outgoing.length > 0) {
      detailsHtml += '<h6 class="mt-3">Outgoing Connections</h6><ul>';
      outgoing.forEach(edge => {
        const targetNode = flowData.nodes.find(n => n.id === edge.target);
        detailsHtml += `<li>${targetNode.name}: ${edge.count} calls</li>`;
      });
      detailsHtml += '</ul>';
    }
    
    body.innerHTML = detailsHtml;
    modal.show();
  }

  function formatDuration(ms) {
    if (!ms) return '-';
    if (ms < 1000) return ms.toFixed(0) + 'ms';
    if (ms < 60000) return (ms / 1000).toFixed(1) + 's';
    return (ms / 60000).toFixed(1) + 'm';
  }

  function exportDiagram() {
    // Get the Mermaid diagram definition
    const mermaidCode = document.querySelector('.mermaid').textContent;
    
    // Create a download link
    const blob = new Blob([mermaidCode], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `agent-flow-${new Date().toISOString().slice(0, 10)}.mmd`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  }

  function resetZoom() {
    // Re-render the diagram to reset zoom
    const container = document.getElementById('flow-diagram');
    const svg = container.querySelector('svg');
    if (svg) {
      svg.style.transform = 'scale(1)';
      svg.style.transformOrigin = 'center';
    }
  }
</script>

<style>
  .mermaid-container {
    width: 100%;
    overflow: auto;
    max-height: 800px;
    background: #f8f9fa;
    border-radius: 4px;
    padding: 20px;
  }
  
  .mermaid svg {
    max-width: none !important;
    height: auto !important;
  }
</style>
<% end %>
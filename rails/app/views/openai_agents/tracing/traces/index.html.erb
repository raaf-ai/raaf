<% content_for :title, "Traces" %>
<% content_for :breadcrumb do %>
  <li class="breadcrumb-item active" aria-current="page">Traces</li>
<% end %>


<div id="tracing-dashboard">
  <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
    <h1 class="h2">Traces</h1>
    <div class="btn-toolbar mb-2 mb-md-0">
      <div class="btn-group me-2">
        <button id="refresh-dashboard" class="btn btn-sm btn-outline-secondary" title="Refresh">
          <i class="bi bi-arrow-clockwise"></i>
        </button>
        <%= link_to traces_path(format: :json), class: "btn btn-sm btn-outline-secondary" do %>
          <i class="bi bi-download me-1"></i>Export JSON
        <% end %>
      </div>
      <div class="form-check form-switch ms-3">
        <input class="form-check-input" type="checkbox" id="auto-refresh-toggle" checked>
        <label class="form-check-label" for="auto-refresh-toggle">
          Auto-refresh
        </label>
      </div>
    </div>
  </div>
  
  <!-- Connection Status -->
  <div id="connection-status" class="alert alert-info d-none" role="alert">
    <i class="bi bi-info-circle me-2"></i>
    <span class="status-text">Connecting...</span>
  </div>

<!-- Filters -->
<div class="filter-form">
  <%= form_with url: traces_path, method: :get, local: true, class: "row g-3" do |form| %>
    <div class="col-md-3">
      <%= form.text_field :search, placeholder: "Search traces...", 
          value: params[:search], class: "form-control form-control-sm" %>
    </div>
    <div class="col-md-2">
      <%= form.select :workflow, 
          options_for_select([['All Workflows', '']] + 
            RubyAIAgentsFactory::Tracing::TraceRecord.distinct.pluck(:workflow_name).compact.map { |w| [w, w] }, 
            params[:workflow]),
          {}, { class: "form-select form-select-sm" } %>
    </div>
    <div class="col-md-2">
      <%= form.select :status,
          options_for_select([['All Statuses', ''], ['Completed', 'completed'], 
                             ['Failed', 'failed'], ['Running', 'running'], ['Pending', 'pending']],
                            params[:status]),
          {}, { class: "form-select form-select-sm" } %>
    </div>
    <div class="col-md-2">
      <%= form.datetime_local_field :start_time,
          value: params[:start_time],
          class: "form-control form-control-sm" %>
      <label class="form-label">Start Time</label>
    </div>
    <div class="col-md-2">
      <%= form.datetime_local_field :end_time,
          value: params[:end_time], 
          class: "form-control form-control-sm" %>
      <label class="form-label">End Time</label>
    </div>
    <div class="col-md-1">
      <%= form.submit "Filter", class: "btn btn-primary btn-sm" %>
    </div>
  <% end %>
</div>

<!-- Stats Summary -->
<% if @stats %>
  <div class="row mb-3">
    <div class="col-md-3">
      <div class="card border-0 bg-light">
        <div class="card-body text-center py-2">
          <div class="h5 mb-0"><%= @stats[:total] %></div>
          <small class="text-muted">Total</small>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card border-0 bg-success bg-opacity-10">
        <div class="card-body text-center py-2">
          <div class="h5 mb-0 text-success"><%= @stats[:completed] %></div>
          <small class="text-muted">Completed</small>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card border-0 bg-danger bg-opacity-10">
        <div class="card-body text-center py-2">
          <div class="h5 mb-0 text-danger"><%= @stats[:failed] %></div>
          <small class="text-muted">Failed</small>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card border-0 bg-warning bg-opacity-10">
        <div class="card-body text-center py-2">
          <div class="h5 mb-0 text-warning"><%= @stats[:running] %></div>
          <small class="text-muted">Running</small>
        </div>
      </div>
    </div>
  </div>
<% end %>

<!-- Traces Table -->
<div id="traces-table-container">
  <%= render partial: 'traces_table', locals: { traces: @traces } %>
</div>

<!-- Last Updated -->
<div class="text-end text-muted small mt-3">
  Last updated: <span id="last-updated"><%= Time.current.strftime("%Y-%m-%d %H:%M:%S") %></span>
</div>

</div><!-- End of tracing-dashboard -->

<% content_for :javascript do %>
<script>
  // Live update functionality for traces
  class TracesLiveUpdate {
    constructor() {
      this.autoRefreshEnabled = true;
      this.refreshInterval = 5000; // 5 seconds
      this.intervalId = null;
      this.initialize();
    }

    initialize() {
      // Setup event handlers
      this.setupEventHandlers();
      
      // Start auto-refresh if enabled
      if (this.autoRefreshEnabled) {
        this.startAutoRefresh();
      }
      
      // Initial connection status
      this.updateConnectionStatus('polling');
    }

    setupEventHandlers() {
      // Refresh button
      const refreshBtn = document.getElementById('refresh-dashboard');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', () => {
          this.fetchUpdates();
        });
      }

      // Auto-refresh toggle
      const autoRefreshToggle = document.getElementById('auto-refresh-toggle');
      if (autoRefreshToggle) {
        autoRefreshToggle.addEventListener('change', (e) => {
          this.autoRefreshEnabled = e.target.checked;
          if (this.autoRefreshEnabled) {
            this.startAutoRefresh();
          } else {
            this.stopAutoRefresh();
          }
        });
      }
    }

    startAutoRefresh() {
      this.stopAutoRefresh();
      this.intervalId = setInterval(() => {
        this.fetchUpdates();
      }, this.refreshInterval);
    }

    stopAutoRefresh() {
      if (this.intervalId) {
        clearInterval(this.intervalId);
        this.intervalId = null;
      }
    }

    async fetchUpdates() {
      try {
        console.log('Fetching updates...');
        const response = await fetch(window.location.href, {
          headers: {
            'Accept': 'text/html',
            'X-Requested-With': 'XMLHttpRequest'
          }
        });

        console.log('Response status:', response.status);
        
        if (response.ok) {
          const html = await response.text();
          console.log('Received HTML length:', html.length);
          console.log('First 200 chars:', html.substring(0, 200));
          
          this.updateTracesList(html);
          this.updateLastUpdated();
          // Show brief success notification if there were changes
          const newTraceCount = document.querySelectorAll('[data-trace-id]').length;
          if (this.lastTraceCount !== undefined && this.lastTraceCount !== newTraceCount) {
            this.updateConnectionStatus('updated');
          }
          this.lastTraceCount = newTraceCount;
        } else {
          console.error('Response not OK:', response.status, response.statusText);
        }
      } catch (error) {
        console.error('Failed to fetch updates:', error);
        this.updateConnectionStatus('error');
      }
    }

    updateTracesList(html) {
      const container = document.getElementById('traces-table-container');
      if (!container) return;

      // Get current trace IDs before update
      const currentTraces = new Set();
      document.querySelectorAll('[data-trace-id]').forEach(tr => {
        currentTraces.add(tr.dataset.traceId);
      });

      // Update the entire table container
      container.innerHTML = html;

      // Highlight new traces
      document.querySelectorAll('[data-trace-id]').forEach(tr => {
        if (!currentTraces.has(tr.dataset.traceId)) {
          tr.classList.add('table-success');
          setTimeout(() => {
            tr.classList.remove('table-success');
          }, 2000);
        }
      });

      // Re-setup chevron handlers for the new elements
      this.setupChevronHandlers();
    }

    updateLastUpdated() {
      const lastUpdated = document.getElementById('last-updated');
      if (lastUpdated) {
        lastUpdated.textContent = new Date().toLocaleString();
      }
    }

    updateConnectionStatus(status) {
      const statusElement = document.getElementById('connection-status');
      if (statusElement) {
        if (status === 'polling') {
          statusElement.classList.remove('d-none');
          statusElement.className = 'alert alert-info';
          statusElement.querySelector('.status-text').textContent = 'Live updates active (refreshing every 5 seconds)';
          // Hide after initial display
          setTimeout(() => {
            statusElement.classList.add('d-none');
          }, 3000);
        } else if (status === 'error') {
          statusElement.classList.remove('d-none');
          statusElement.className = 'alert alert-warning';
          statusElement.querySelector('.status-text').textContent = 'Connection error - retrying...';
          setTimeout(() => {
            statusElement.classList.add('d-none');
          }, 3000);
        } else if (status === 'updated') {
          // Show brief update notification
          statusElement.classList.remove('d-none');
          statusElement.className = 'alert alert-success';
          statusElement.querySelector('.status-text').textContent = 'Updated!';
          setTimeout(() => {
            statusElement.classList.add('d-none');
          }, 1000);
        }
      }
    }

    setupChevronHandlers() {
      // Re-setup chevron rotation for expand/collapse
      document.querySelectorAll('.toggle-spans').forEach(button => {
        const targetId = button.getAttribute('data-bs-target');
        const target = document.querySelector(targetId);
        const icon = button.querySelector('i');
        
        if (target) {
          // Remove existing listeners
          const newButton = button.cloneNode(true);
          button.parentNode.replaceChild(newButton, button);
          
          target.addEventListener('shown.bs.collapse', () => {
            icon.className = 'bi bi-chevron-down';
          });
          
          target.addEventListener('hidden.bs.collapse', () => {
            icon.className = 'bi bi-chevron-right';
          });
        }
      });
    }

    destroy() {
      this.stopAutoRefresh();
    }
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Initialize live updates
    window.tracesLiveUpdate = new TracesLiveUpdate();
    
    // Handle chevron rotation for expand/collapse
    document.querySelectorAll('.toggle-spans').forEach(button => {
      const targetId = button.getAttribute('data-bs-target');
      const target = document.querySelector(targetId);
      const icon = button.querySelector('i');
      
      if (target) {
        target.addEventListener('shown.bs.collapse', () => {
          icon.className = 'bi bi-chevron-down';
        });
        
        target.addEventListener('hidden.bs.collapse', () => {
          icon.className = 'bi bi-chevron-right';
        });
      }
    });
  });
</script>
<% end %>